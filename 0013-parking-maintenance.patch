From e4efe234b6fedde2ffd689e52d1e4110b5493310 Mon Sep 17 00:00:00 2001
From: Kai Nagel <2008@kainagel.org>
Date: Thu, 23 Jul 2015 18:36:16 +0100
Subject: [PATCH 13/16] parking maintenance

---
 .../contribs/parking/PC2/GeneralParkingModule.java  |   2 +-
 .../matsim/contrib/parking/PC2/package-info.java   |   8 ++
 .../PC2/simulation/ParkingChoiceSimulation.java    | 142 +++++++++++----------
 .../simulation/ParkingInfrastructureManager.java   |   9 +-
 .../api/core/v01/events/PersonDepartureEvent.java  |   2 +
 5 files changed, 90 insertions(+), 73 deletions(-)
 create mode 100644 contrib/parking/src/main/java/org/matsim/contrib/parking/PC2/package-info.java

diff --git a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/GeneralParkingModule.java b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/GeneralParkingModule.java
index bce63eb..194fd5f 100644
--- a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/GeneralParkingModule.java
+++ b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/GeneralParkingModule.java
@@ -36,7 +36,7 @@ public class GeneralParkingModule implements StartupListener, IterationStartsLis
 	
 	@Override
 	public void notifyStartup(StartupEvent event) {
-		parkingSimulation = new ParkingChoiceSimulation(controler, parkingInfrastructureManager);
+		parkingSimulation = new ParkingChoiceSimulation(controler.getScenario(), parkingInfrastructureManager);
 		controler.getEvents().addHandler(parkingSimulation);
 //		controler.addControlerListener(parkingSimulation);
 		// was not doing anything there. kai, jul'15
diff --git a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/package-info.java b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/package-info.java
new file mode 100644
index 0000000..87dd50d
--- /dev/null
+++ b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/package-info.java
@@ -0,0 +1,8 @@
+/**
+ * It looks to us like that PC2 and parkingChoice are two implementations of the same or at least overlapping functionality.   Since PC2 
+ * seems newer, documentation and refactoring of the contrib concentrates on that one.  kai, jul'15
+ * 
+ * @author (of documentation) nagel
+ */
+
+package org.matsim.contrib.parking.PC2;
diff --git a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingChoiceSimulation.java b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingChoiceSimulation.java
index d3c83fc..9402c5a 100644
--- a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingChoiceSimulation.java
+++ b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingChoiceSimulation.java
@@ -23,6 +23,7 @@ import java.util.HashMap;
 import java.util.List;
 
 import org.matsim.api.core.v01.Id;
+import org.matsim.api.core.v01.Scenario;
 import org.matsim.api.core.v01.TransportMode;
 import org.matsim.api.core.v01.events.ActivityEndEvent;
 import org.matsim.api.core.v01.events.PersonArrivalEvent;
@@ -40,20 +41,19 @@ import org.matsim.contrib.parking.lib.DebugLib;
 import org.matsim.contrib.parking.lib.GeneralLib;
 import org.matsim.contrib.parking.lib.obj.DoubleValueHashMap;
 import org.matsim.contrib.parking.lib.obj.IntegerValueHashMap;
-import org.matsim.core.controler.Controler;
 import org.matsim.core.population.PopulationUtils;
 
 public final class ParkingChoiceSimulation implements PersonDepartureEventHandler, PersonArrivalEventHandler, 
 ActivityEndEventHandler {
 
 	private ParkingInfrastructureManager parkingInfrastructureManager;
-	private Controler controler;
+	private Scenario scenario;
 	private IntegerValueHashMap<Id<Person>> currentPlanElementIndex;
 	private HashMap<Id<Person>, ParkingOperationRequestAttributes> parkingOperationRequestAttributes;
 	private DoubleValueHashMap<Id<Person>> firstDepartureTimeOfDay;
 
-	public ParkingChoiceSimulation(Controler controler, ParkingInfrastructureManager parkingInfrastructureManager){
-		this.controler = controler;
+	public ParkingChoiceSimulation(Scenario scenario, ParkingInfrastructureManager parkingInfrastructureManager){
+		this.scenario = scenario;
 		this.parkingInfrastructureManager = parkingInfrastructureManager;
 	}
 
@@ -63,10 +63,16 @@ ActivityEndEventHandler {
 	}
 
 	@Override
+	public void handleEvent(ActivityEndEvent event) {
+		currentPlanElementIndex.increment(event.getPersonId());
+	}
+	
+	@Override
 	public void handleEvent(PersonDepartureEvent event) {
 		if (event.getLegMode().equalsIgnoreCase(TransportMode.car)){
 			if (!firstDepartureTimeOfDay.containsKey(event.getPersonId())){
 				firstDepartureTimeOfDay.put(event.getPersonId(),event.getTime());
+				// (I think that this is to remember the wrap-around activity. kai, jul'15) 
 			}
 
 			if (isFirstCarDepartureOfDay(event.getPersonId())){
@@ -81,6 +87,8 @@ ActivityEndEventHandler {
 				ParkingOperationRequestAttributes parkingAttributes = parkingOperationRequestAttributes.get(event.getPersonId());
 				parkingAttributes.parkingDurationInSeconds=GeneralLib.getIntervalDuration(parkingAttributes.arrivalTime, event.getTime());
 				if (parkingAttributes.parkingDurationInSeconds==24*3600){
+					// (yyyy no idea what this is and why. kai, jul'15)
+					
 					parkingAttributes.parkingDurationInSeconds=1; // not zero, because this might lead to NaN
 				}
 
@@ -91,33 +99,12 @@ ActivityEndEventHandler {
 		}
 	}
 
-	private boolean isFirstCarDepartureOfDay(Id<Person> personId) {
-		Person person = controler.getScenario().getPopulation().getPersons().get(personId);
-		List<PlanElement> planElements = person.getSelectedPlan().getPlanElements();
-		for (int i=currentPlanElementIndex.get(personId)-1;i>=0;i--){
-			if (planElements.get(i) instanceof Leg){
-				Leg leg= (Leg) planElements.get(i);
-
-				if (leg.getMode().equalsIgnoreCase(TransportMode.car)){
-					return false;
-				}
-
-			}
-		}
-		return true;
-	}
-
-	@Override
-	public void handleEvent(ActivityEndEvent event) {
-		currentPlanElementIndex.increment(event.getPersonId());
-	}
-
 	@Override
 	public void handleEvent(PersonArrivalEvent event) {
 		Id<Person> personId = event.getPersonId();
 		if (event.getLegMode().equalsIgnoreCase(TransportMode.car)){
 			ParkingOperationRequestAttributes parkingAttributes =new ParkingOperationRequestAttributes();
-			Link link = controler.getScenario().getNetwork().getLinks().get(event.getLinkId());
+			Link link = scenario.getNetwork().getLinks().get(event.getLinkId());
 			Activity nextActivity = getNextActivity(personId);
 
 			parkingAttributes.destCoordinate=link.getCoord();
@@ -128,7 +115,6 @@ ActivityEndEventHandler {
 
 			if (isLastCarLegOfDay(personId)){
 				parkingAttributes.parkingDurationInSeconds=GeneralLib.getIntervalDuration(event.getTime(), firstDepartureTimeOfDay.get(personId));
-
 			} else {
 				Activity activityBeforeNextCarLeg = getActivityBeforeNextCarLeg(personId);
 				parkingAttributes.parkingDurationInSeconds=GeneralLib.getIntervalDuration(event.getTime(), activityBeforeNextCarLeg.getEndTime());
@@ -151,50 +137,98 @@ ActivityEndEventHandler {
 		currentPlanElementIndex.increment(personId);
 	}
 
+
+	public void prepareForNewIteration() {
+		currentPlanElementIndex=new IntegerValueHashMap<>();
+		parkingOperationRequestAttributes=new HashMap<>();
+		firstDepartureTimeOfDay=new DoubleValueHashMap<>();
+
+		for (Person person: scenario.getPopulation().getPersons().values()){
+			if (PopulationUtils.hasCarLeg(person.getSelectedPlan())){
+				DebugLib.traceAgent(person.getId());
+				ParkingOperationRequestAttributes parkingAttributes = new ParkingOperationRequestAttributes();
+
+				Activity firstActivityOfDayBeforeDepartingWithCar = PopulationUtils.getFirstActivityOfDayBeforeDepartingWithCar(person.getSelectedPlan());
+				Activity firstActivityAfterLastCarLegOfDay = PopulationUtils.getFirstActivityAfterLastCarLegOfDay(person.getSelectedPlan());
+
+				parkingAttributes.destCoordinate=firstActivityAfterLastCarLegOfDay.getCoord();
+				//parkingAttributes.arrivalTime=firstActivityAfterLastCarLegOfDay.getStartTime();
+				parkingAttributes.arrivalTime=0;
+
+				parkingAttributes.personId=person.getId();
+				parkingAttributes.facilityId=firstActivityAfterLastCarLegOfDay.getFacilityId();
+				parkingAttributes.actType=firstActivityAfterLastCarLegOfDay.getType();
+				parkingAttributes.parkingDurationInSeconds=GeneralLib.getIntervalDuration(firstActivityAfterLastCarLegOfDay.getStartTime(), 
+						firstActivityOfDayBeforeDepartingWithCar.getEndTime());
+
+				parkingAttributes.legIndex=0;
+
+				parkingInfrastructureManager.parkVehicle(parkingAttributes);
+			}
+		}
+	}
+	
+	// === only private helper functions below this line ===
+
+	private boolean isFirstCarDepartureOfDay(Id<Person> personId) {
+		Person person = scenario.getPopulation().getPersons().get(personId);
+		List<PlanElement> planElements = person.getSelectedPlan().getPlanElements();
+		for (int i=currentPlanElementIndex.get(personId)-1;i>=0;i--){
+			if (planElements.get(i) instanceof Leg){
+				Leg leg= (Leg) planElements.get(i);
+				
+				if (leg.getMode().equalsIgnoreCase(TransportMode.car)){
+					return false;
+				}
+				
+			}
+		}
+		return true;
+	}
 	// TODO: operation could be made faster through caching.
 	private boolean isLastCarLegOfDay(Id<Person> personId){
-		Person person = controler.getScenario().getPopulation().getPersons().get(personId);
+		Person person = scenario.getPopulation().getPersons().get(personId);
 		List<PlanElement> planElements = person.getSelectedPlan().getPlanElements();
 		for (int i=currentPlanElementIndex.get(personId)+1;i<planElements.size();i++){
 			if (planElements.get(i) instanceof Leg){
 				Leg Leg= (Leg) planElements.get(i);
-
+				
 				if (Leg.getMode().equalsIgnoreCase(TransportMode.car)){
 					return false;
 				}
-
+				
 			}
 		}
 		return true;
 	}
-
+	
 	private Activity getActivityBeforeNextCarLeg(Id<Person> personId){
-		Person person = controler.getScenario().getPopulation().getPersons().get(personId);
+		Person person = scenario.getPopulation().getPersons().get(personId);
 		List<PlanElement> planElements = person.getSelectedPlan().getPlanElements();
 		int indexOfNextCarLeg=-1;
 		for (int i=currentPlanElementIndex.get(personId)+1;i<planElements.size();i++){
 			if (planElements.get(i) instanceof Leg){
 				Leg Leg= (Leg) planElements.get(i);
-
+				
 				if (Leg.getMode().equalsIgnoreCase(TransportMode.car)){
 					indexOfNextCarLeg=i;
 					break;
 				}
-
+				
 			}
 		}
-
+		
 		for (int i=indexOfNextCarLeg-1;i>=0;i--){
 			if (planElements.get(i) instanceof Activity){
 				return (Activity) planElements.get(i);
 			}
 		}
-
+		
 		return null;
 	}
-
+	
 	private Activity getNextActivity(Id<Person> personId){
-		Person person = controler.getScenario().getPopulation().getPersons().get(personId);
+		Person person = scenario.getPopulation().getPersons().get(personId);
 		List<PlanElement> planElements = person.getSelectedPlan().getPlanElements();
 		for (int i=currentPlanElementIndex.get(personId);i<planElements.size();i++){
 			if (planElements.get(i) instanceof Activity){
@@ -203,35 +237,5 @@ ActivityEndEventHandler {
 		}
 		return null;
 	}
-
-	public void prepareForNewIteration() {
-		currentPlanElementIndex=new IntegerValueHashMap<>();
-		parkingOperationRequestAttributes=new HashMap<>();
-		firstDepartureTimeOfDay=new DoubleValueHashMap<>();
-
-		for (Person person: controler.getScenario().getPopulation().getPersons().values()){
-			if (PopulationUtils.hasCarLeg(person.getSelectedPlan())){
-				DebugLib.traceAgent(person.getId());
-				ParkingOperationRequestAttributes parkingAttributes = new ParkingOperationRequestAttributes();
-
-				Activity firstActivityOfDayBeforeDepartingWithCar = PopulationUtils.getFirstActivityOfDayBeforeDepartingWithCar(person.getSelectedPlan());
-				Activity firstActivityAfterLastCarLegOfDay = PopulationUtils.getFirstActivityAfterLastCarLegOfDay(person.getSelectedPlan());
-
-				parkingAttributes.destCoordinate=firstActivityAfterLastCarLegOfDay.getCoord();
-				//parkingAttributes.arrivalTime=firstActivityAfterLastCarLegOfDay.getStartTime();
-				parkingAttributes.arrivalTime=0;
-
-				parkingAttributes.personId=person.getId();
-				parkingAttributes.facilityId=firstActivityAfterLastCarLegOfDay.getFacilityId();
-				parkingAttributes.actType=firstActivityAfterLastCarLegOfDay.getType();
-				parkingAttributes.parkingDurationInSeconds=GeneralLib.getIntervalDuration(firstActivityAfterLastCarLegOfDay.getStartTime(), 
-						firstActivityOfDayBeforeDepartingWithCar.getEndTime());
-
-				parkingAttributes.legIndex=0;
-
-				parkingInfrastructureManager.parkVehicle(parkingAttributes);
-			}
-		}
-	}
-
 }
+
diff --git a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingInfrastructureManager.java b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingInfrastructureManager.java
index bbf6a10..b4a04de 100644
--- a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingInfrastructureManager.java
+++ b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingInfrastructureManager.java
@@ -371,11 +371,14 @@ public class ParkingInfrastructureManager {
 
 	// TODO: make this method abstract
 	public synchronized PC2Parking personCarDepartureEvent(ParkingOperationRequestAttributes parkingOperationRequestAttributes) {
-		Id<PC2Parking> parkingFacilityId = parkedVehicles.get(parkingOperationRequestAttributes.personId);
+		final Id<Person> personId = parkingOperationRequestAttributes.personId;
+		Id<PC2Parking> parkingFacilityId = parkedVehicles.get(personId);
 		PC2Parking parking = getAllParkings().get(parkingFacilityId);
-		parkedVehicles.remove(parkingOperationRequestAttributes.personId);
+
+		parkedVehicles.remove(personId);
+		
 		unParkVehicle(parking, parkingOperationRequestAttributes.arrivalTime
-				+ parkingOperationRequestAttributes.parkingDurationInSeconds, parkingOperationRequestAttributes.personId);
+				+ parkingOperationRequestAttributes.parkingDurationInSeconds, personId);
 		return parking;
 	}
 
diff --git a/matsim/src/main/java/org/matsim/api/core/v01/events/PersonDepartureEvent.java b/matsim/src/main/java/org/matsim/api/core/v01/events/PersonDepartureEvent.java
index 1eff5d7..33aed03 100644
--- a/matsim/src/main/java/org/matsim/api/core/v01/events/PersonDepartureEvent.java
+++ b/matsim/src/main/java/org/matsim/api/core/v01/events/PersonDepartureEvent.java
@@ -46,6 +46,7 @@ public class PersonDepartureEvent extends Event implements HasPersonId {
 		this.personId = agentId;
 	}
 	
+	@Override
 	public Id<Person> getPersonId() {
 		return this.personId;
 	}
@@ -58,6 +59,7 @@ public class PersonDepartureEvent extends Event implements HasPersonId {
 		return this.legMode;
 	}
 	
+	@Override
 	public String getEventType() {
 		return EVENT_TYPE;
 	}
-- 
2.3.2 (Apple Git-55)

