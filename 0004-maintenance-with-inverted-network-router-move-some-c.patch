From 53b34e668287a353de7e7c4d80d87ab772df56d8 Mon Sep 17 00:00:00 2001
From: Kai Nagel <2008@kainagel.org>
Date: Fri, 17 Jul 2015 16:11:20 +0200
Subject: [PATCH 04/16] maintenance with inverted network router; move some
 classes from core to contrib (this actually happened in previous commit)

---
 .../contribs/signals/SignalsTurnInfoBuilder.java    | 17 +++-
 .../signals/router/InvertedNetworkLegRouter.java   | 71 +++-------------
 .../InvertedNetworkTripRouterFactoryModule.java    |  2 +-
 .../contribs/signals/router/NetworkInverter.java    | 25 +++---
 .../router/TravelTimesInvertedNetProxy.java        |  8 +-
 .../org/matsim/contrib/signals/router/Utils.java   | 94 ++++++++++++++++++++++
 6 files changed, 142 insertions(+), 75 deletions(-)
 create mode 100644 contrib/signals/src/main/java/org/matsim/contrib/signals/router/Utils.java

diff --git a/contribs/signals/src/main/java/org/matsim/contrib/signals/SignalsTurnInfoBuilder.java b/contribs/signals/src/main/java/org/matsim/contrib/signals/SignalsTurnInfoBuilder.java
index b7b8315..4567477 100644
--- a/contribs/signals/src/main/java/org/matsim/contrib/signals/SignalsTurnInfoBuilder.java
+++ b/contribs/signals/src/main/java/org/matsim/contrib/signals/SignalsTurnInfoBuilder.java
@@ -44,7 +44,7 @@ public class SignalsTurnInfoBuilder {
 	private static int warnCount = 0;
 
 	
-	public Map<Id<Link>, List<TurnInfo>> createSignalsTurnInfos(SignalSystemsData ssd) {
+	public static Map<Id<Link>, List<TurnInfo>> createSignalsTurnInfos(SignalSystemsData ssd) {
 		Map<Id<Link>, List<TurnInfo>> inLinkIdTurnInfoMap = new HashMap<Id<Link>, List<TurnInfo>>();
 		for (SignalSystemData signalSystem : ssd.getSignalSystemData().values()){
 			for (SignalData signal : signalSystem.getSignalData().values()){
@@ -53,6 +53,9 @@ public class SignalsTurnInfoBuilder {
 						log.warn("Turning move restrictions for signals are implemented for TransportMode.car only, yet!");
 						warnCount++;
 					}
+					if ( inLinkIdTurnInfoMap.containsKey( signal.getLinkId() ) ) { 
+						throw new RuntimeException( "There is already a signal on this link.") ;
+					}
 					inLinkIdTurnInfoMap.put(signal.getLinkId(), new ArrayList<TurnInfo>());
 					Set<String> modeCar = new HashSet<String>();
 					modeCar.add(TransportMode.car);
@@ -60,6 +63,18 @@ public class SignalsTurnInfoBuilder {
 						TurnInfo ti = new TurnInfo(signal.getLinkId(), toLinkId, modeCar);
 						inLinkIdTurnInfoMap.get(signal.getLinkId()).add(ti);
 					}
+					
+//					if ( !inLinkIdTurnInfoMap.containsKey( signal.getLinkId() ) ) { 
+//						inLinkIdTurnInfoMap.put(signal.getLinkId(), new ArrayList<TurnInfo>());
+//					}
+//					Set<String> modeCar = new HashSet<String>();
+//					modeCar.add(TransportMode.car);
+//					for (Id<Link> toLinkId : signal.getTurningMoveRestrictions()){
+//						TurnInfo ti = new TurnInfo(signal.getLinkId(), toLinkId, modeCar);
+//						inLinkIdTurnInfoMap.get(signal.getLinkId()).add(ti);
+//					}
+					
+					
 				}
 			}
 		}
diff --git a/contribs/signals/src/main/java/org/matsim/contrib/signals/router/InvertedNetworkLegRouter.java b/contribs/signals/src/main/java/org/matsim/contrib/signals/router/InvertedNetworkLegRouter.java
index cf33b78..8360f65 100644
--- a/contribs/signals/src/main/java/org/matsim/contrib/signals/router/InvertedNetworkLegRouter.java
+++ b/contribs/signals/src/main/java/org/matsim/contrib/signals/router/InvertedNetworkLegRouter.java
@@ -29,11 +29,6 @@ import org.matsim.api.core.v01.population.Activity;
 import org.matsim.api.core.v01.population.Leg;
 import org.matsim.api.core.v01.population.Person;
 import org.matsim.api.core.v01.population.PopulationFactory;
-import org.matsim.contrib.signals.SignalSystemsConfigGroup;
-import org.matsim.contrib.signals.SignalsTurnInfoBuilder;
-import org.matsim.contrib.signals.data.SignalsData;
-import org.matsim.contrib.signals.data.signalsystems.v20.SignalSystemsData;
-import org.matsim.core.config.ConfigUtils;
 import org.matsim.core.config.groups.PlanCalcScoreConfigGroup;
 import org.matsim.core.network.algorithms.NetworkExpandNode.TurnInfo;
 import org.matsim.core.population.LegImpl;
@@ -46,9 +41,6 @@ import org.matsim.core.router.costcalculators.TravelDisutilityFactory;
 import org.matsim.core.router.old.LegRouter;
 import org.matsim.core.router.util.*;
 import org.matsim.core.router.util.LeastCostPathCalculator.Path;
-import org.matsim.lanes.data.v20.Lane;
-import org.matsim.lanes.data.v20.LaneDefinitions20;
-import org.matsim.lanes.data.v20.LanesToLinkAssignment20;
 
 import java.util.*;
 
@@ -72,20 +64,22 @@ public class InvertedNetworkLegRouter implements LegRouter {
 
 	private Network network = null;
 
-	public InvertedNetworkLegRouter(Scenario sc,
+	InvertedNetworkLegRouter(Scenario sc,
 			LeastCostPathCalculatorFactory leastCostPathCalcFactory,
-			TravelDisutilityFactory travelCostCalculatorFactory, LinkToLinkTravelTime travelTimes) {
+			TravelDisutilityFactory travelCostCalculatorFactory, LinkToLinkTravelTime l2ltravelTimes) {
 		PlanCalcScoreConfigGroup cnScoringGroup = sc.getConfig().planCalcScore();
 		this.routeFactory = ((PopulationFactoryImpl) sc.getPopulation().getFactory())
 				.getModeRouteFactory();
 		this.network = sc.getNetwork();
 
-		Map<Id<Link>, List<TurnInfo>> allowedInLinkTurnInfoMap = this.createAllowedTurnInfos(sc);
+		Map<Id<Link>, List<TurnInfo>> allowedInLinkTurnInfoMap = Utils.createAllowedTurnInfos(sc);
 		
-		NetworkInverter networkInverter = new NetworkInverter(network, allowedInLinkTurnInfoMap);
-		this.invertedNetwork = networkInverter.getInvertedNetwork();
+		this.invertedNetwork = new NetworkInverter(network, allowedInLinkTurnInfoMap).getInvertedNetwork();
 
-		TravelTimesInvertedNetProxy travelTimesProxy = new TravelTimesInvertedNetProxy(network, travelTimes);
+		// method that takes a getLinkTravelTime( link , ...) with a link from the inverted network, converts it into links on the 
+		// original network, and looks up the link2link tttime in the l2ltravelTimes data structure:
+		TravelTimesInvertedNetProxy travelTimesProxy = new TravelTimesInvertedNetProxy(network, l2ltravelTimes);
+		
 		TravelDisutility travelCost = travelCostCalculatorFactory.createTravelDisutility(
 				travelTimesProxy, cnScoringGroup);
 
@@ -99,49 +93,6 @@ public class InvertedNetworkLegRouter implements LegRouter {
 		return new LegRouterWrapper( mode, popFact, toWrap ) ;
 	}
 
-	static Map<Id<Link>, List<TurnInfo>> createTurnInfos(LaneDefinitions20 laneDefs) {
-		Map<Id<Link>, List<TurnInfo>> inLinkIdTurnInfoMap = new HashMap<>();
-		Set<Id<Link>> toLinkIds = new HashSet<>();
-		for (LanesToLinkAssignment20 l2l : laneDefs.getLanesToLinkAssignments().values()) {
-			toLinkIds.clear();
-			for (Lane lane : l2l.getLanes().values()) {
-				if (lane.getToLinkIds() != null
-						&& (lane.getToLaneIds() == null || lane.getToLaneIds().isEmpty())) { // make sure that it is a lane at the
-																																									// end of a link
-					toLinkIds.addAll(lane.getToLinkIds());
-				}
-			}
-			if (!toLinkIds.isEmpty()) {
-				List<TurnInfo> turnInfoList = new ArrayList<TurnInfo>();
-				for (Id<Link> toLinkId : toLinkIds) {
-					turnInfoList.add(new TurnInfo(l2l.getLinkId(), toLinkId));
-				}
-				inLinkIdTurnInfoMap.put(l2l.getLinkId(), turnInfoList);
-			}
-		}
-
-		return inLinkIdTurnInfoMap;
-	}
-
-	private Map<Id<Link>, List<TurnInfo>> createAllowedTurnInfos(Scenario sc){
-		Map<Id<Link>, List<TurnInfo>> allowedInLinkTurnInfoMap = new HashMap<>();
-
-		NetworkTurnInfoBuilder netTurnInfoBuilder = new NetworkTurnInfoBuilder();
-		netTurnInfoBuilder.createAndAddTurnInfo(TransportMode.car, allowedInLinkTurnInfoMap, this.network);
-
-		if (sc.getConfig().scenario().isUseLanes()) {
-			LaneDefinitions20 ld = sc.getLanes();
-			Map<Id<Link>, List<TurnInfo>> lanesTurnInfoMap = createTurnInfos(ld);
-			netTurnInfoBuilder.mergeTurnInfoMaps(allowedInLinkTurnInfoMap, lanesTurnInfoMap);
-		}
-		if (ConfigUtils.addOrGetModule(sc.getConfig(), SignalSystemsConfigGroup.GROUPNAME, SignalSystemsConfigGroup.class).isUseSignalSystems()) {
-			SignalSystemsData ssd = ((SignalsData) sc.getScenarioElement(SignalsData.ELEMENT_NAME)).getSignalSystemsData();
-			Map<Id<Link>, List<TurnInfo>> signalsTurnInfoMap = new SignalsTurnInfoBuilder().createSignalsTurnInfos(ssd);
-			netTurnInfoBuilder.mergeTurnInfoMaps(allowedInLinkTurnInfoMap, signalsTurnInfoMap);
-		}
-		return allowedInLinkTurnInfoMap;
-	}
-
 	@Override
 	public double routeLeg(Person person, Leg leg, Activity fromAct, Activity toAct,
 			double departureTime) {
@@ -176,7 +127,11 @@ public class InvertedNetworkLegRouter implements LegRouter {
 		leg.setRoute(route);
 		return travelTime;
 	}
-
+	
+	/**
+	 * This looks like it is taking whatever comes out of the inverted network router and converts it to a normal route which
+	 * can be given to the plan. 
+	 */
 	private NetworkRoute invertPath2NetworkRoute(Path path, Id<Link> fromLinkId, Id<Link> toLinkId) {
 		NetworkRoute route = (NetworkRoute) this.routeFactory.createRoute(TransportMode.car,
 				fromLinkId, toLinkId);
diff --git a/contribs/signals/src/main/java/org/matsim/contrib/signals/router/InvertedNetworkTripRouterFactoryModule.java b/contribs/signals/src/main/java/org/matsim/contrib/signals/router/InvertedNetworkTripRouterFactoryModule.java
index e8d95e3..e509521 100644
--- a/contribs/signals/src/main/java/org/matsim/contrib/signals/router/InvertedNetworkTripRouterFactoryModule.java
+++ b/contribs/signals/src/main/java/org/matsim/contrib/signals/router/InvertedNetworkTripRouterFactoryModule.java
@@ -33,7 +33,7 @@ public class InvertedNetworkTripRouterFactoryModule extends AbstractModule {
     @Override
     public void install() {
         install(new LeastCostPathCalculatorModule());
-        install(new TransitRouterModule());
+        install(new TransitRouterModule()); // yy why?  kai, jul'15
         if (getConfig().controler().isLinkToLinkRoutingEnabled()) {
             bind(TripRouterFactory.class).to(LinkToLinkTripRouterFactory.class).in(Singleton.class);
         }
diff --git a/contribs/signals/src/main/java/org/matsim/contrib/signals/router/NetworkInverter.java b/contribs/signals/src/main/java/org/matsim/contrib/signals/router/NetworkInverter.java
index 3bfa4a3..ac77015 100644
--- a/contribs/signals/src/main/java/org/matsim/contrib/signals/router/NetworkInverter.java
+++ b/contribs/signals/src/main/java/org/matsim/contrib/signals/router/NetworkInverter.java
@@ -1,6 +1,5 @@
-package org.matsim.core.router.util;
+package org.matsim.contrib.signals.router;
 
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -13,6 +12,7 @@ import org.matsim.api.core.v01.network.Node;
 import org.matsim.core.network.LinkImpl;
 import org.matsim.core.network.NetworkImpl;
 import org.matsim.core.network.algorithms.NetworkExpandNode.TurnInfo;
+import org.matsim.core.router.util.NetworkTurnInfoBuilder;
 
 /**
  * Converts a network to an inverted network. Inverted nodes are situated at
@@ -24,7 +24,7 @@ import org.matsim.core.network.algorithms.NetworkExpandNode.TurnInfo;
  * @author aneumann
  * @author dgrether
  */
-public class NetworkInverter {
+class NetworkInverter {
 
 	final private static Logger log = Logger.getLogger(NetworkInverter.class);
 
@@ -34,12 +34,12 @@ public class NetworkInverter {
 
 	private Map<Id<Link>, List<TurnInfo>>  inLinkTurnInfoMap = null;
 
-	public NetworkInverter(Network originalNet, Map<Id<Link>, List<TurnInfo>>  inLinkTurnInfoMap) {
+	NetworkInverter(Network originalNet, Map<Id<Link>, List<TurnInfo>>  inLinkTurnInfoMap) {
 		this.originalNetwork = originalNet;
 		this.inLinkTurnInfoMap = inLinkTurnInfoMap;
 	}
 
-	public Network getInvertedNetwork() {
+	Network getInvertedNetwork() {
 		if (this.invertedNetwork == null){
 			invertNetwork();
 		}
@@ -90,12 +90,13 @@ public class NetworkInverter {
 		return numberOfLinksGenerated + 1;
 	}
 
-	public List<Link> convertInvertedNodesToLinks(List<Node> nodes) {
-		List<Link> ret = new ArrayList<Link>(nodes.size());
-		for (Node n : nodes){
-			ret.add(this.originalNetwork.getLinks().get(Id.create(n.getId(), Link.class)));
-		}
-		return ret;
-	}
+//	public List<Link> convertInvertedNodesToLinks(List<Node> nodes) {
+//		List<Link> ret = new ArrayList<Link>(nodes.size());
+//		for (Node n : nodes){
+//			ret.add(this.originalNetwork.getLinks().get(Id.create(n.getId(), Link.class)));
+//		}
+//		return ret;
+//	}
+	// never used. kai, jul'15
 
 }
diff --git a/contribs/signals/src/main/java/org/matsim/contrib/signals/router/TravelTimesInvertedNetProxy.java b/contribs/signals/src/main/java/org/matsim/contrib/signals/router/TravelTimesInvertedNetProxy.java
index 73def75..f936e13 100644
--- a/contribs/signals/src/main/java/org/matsim/contrib/signals/router/TravelTimesInvertedNetProxy.java
+++ b/contribs/signals/src/main/java/org/matsim/contrib/signals/router/TravelTimesInvertedNetProxy.java
@@ -17,12 +17,14 @@
  *   See also COPYING, LICENSE and WARRANTY file                           *
  *                                                                         *
  * *********************************************************************** */
-package org.matsim.core.router.util;
+package org.matsim.contrib.signals.router;
 
 import org.matsim.api.core.v01.Id;
 import org.matsim.api.core.v01.network.Link;
 import org.matsim.api.core.v01.network.Network;
 import org.matsim.api.core.v01.population.Person;
+import org.matsim.core.router.util.LinkToLinkTravelTime;
+import org.matsim.core.router.util.TravelTime;
 import org.matsim.vehicles.Vehicle;
 
 
@@ -30,10 +32,10 @@ import org.matsim.vehicles.Vehicle;
  * Proxy for a LinkToLinkTravelTime instance to make it work with the 
  * LeastCostPathCalculator working on an inverted network.
  * @author dgrether
- * @see org.matsim.core.route.util.NetworkInverter
+ * @see NetworkInverter
  *
  */
-public class TravelTimesInvertedNetProxy implements TravelTime {
+class TravelTimesInvertedNetProxy implements TravelTime {
 
 	private Network originalNetwork;
 	
diff --git a/contribs/signals/src/main/java/org/matsim/contrib/signals/router/Utils.java b/contribs/signals/src/main/java/org/matsim/contrib/signals/router/Utils.java
new file mode 100644
index 0000000..cc4cdeb
--- /dev/null
+++ b/contribs/signals/src/main/java/org/matsim/contrib/signals/router/Utils.java
@@ -0,0 +1,94 @@
+/* *********************************************************************** *
+ * project: org.matsim.*												   *
+ *                                                                         *
+ * *********************************************************************** *
+ *                                                                         *
+ * copyright       : (C) 2008 by the members listed in the COPYING,        *
+ *                   LICENSE and WARRANTY file.                            *
+ * email           : info at matsim dot org                                *
+ *                                                                         *
+ * *********************************************************************** *
+ *                                                                         *
+ *   This program is free software; you can redistribute it and/or modify  *
+ *   it under the terms of the GNU General Public License as published by  *
+ *   the Free Software Foundation; either version 2 of the License, or     *
+ *   (at your option) any later version.                                   *
+ *   See also COPYING, LICENSE and WARRANTY file                           *
+ *                                                                         *
+ * *********************************************************************** */
+package org.matsim.contrib.signals.router;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.matsim.api.core.v01.Id;
+import org.matsim.api.core.v01.Scenario;
+import org.matsim.api.core.v01.TransportMode;
+import org.matsim.api.core.v01.network.Link;
+import org.matsim.contrib.signals.SignalSystemsConfigGroup;
+import org.matsim.contrib.signals.SignalsTurnInfoBuilder;
+import org.matsim.contrib.signals.data.SignalsData;
+import org.matsim.contrib.signals.data.signalsystems.v20.SignalSystemsData;
+import org.matsim.core.config.ConfigUtils;
+import org.matsim.core.network.algorithms.NetworkExpandNode.TurnInfo;
+import org.matsim.core.router.util.NetworkTurnInfoBuilder;
+import org.matsim.lanes.data.v20.Lane;
+import org.matsim.lanes.data.v20.LaneDefinitions20;
+import org.matsim.lanes.data.v20.LanesToLinkAssignment20;
+
+/**
+ * @author nagel
+ *
+ */
+class Utils {
+	private Utils(){} // do not instantiate
+
+	static Map<Id<Link>, List<TurnInfo>> createTurnInfos(LaneDefinitions20 laneDefs) {
+		Map<Id<Link>, List<TurnInfo>> inLinkIdTurnInfoMap = new HashMap<>();
+		Set<Id<Link>> toLinkIds = new HashSet<>();
+		for (LanesToLinkAssignment20 l2l : laneDefs.getLanesToLinkAssignments().values()) {
+			toLinkIds.clear();
+			for (Lane lane : l2l.getLanes().values()) {
+				if (lane.getToLinkIds() != null
+						&& (lane.getToLaneIds() == null || lane.getToLaneIds().isEmpty())) { // make sure that it is a lane at the end of a link
+					toLinkIds.addAll(lane.getToLinkIds());
+				}
+			}
+			if (!toLinkIds.isEmpty()) {
+				List<TurnInfo> turnInfoList = new ArrayList<TurnInfo>();
+				for (Id<Link> toLinkId : toLinkIds) {
+					turnInfoList.add(new TurnInfo(l2l.getLinkId(), toLinkId));
+				}
+				inLinkIdTurnInfoMap.put(l2l.getLinkId(), turnInfoList);
+			}
+		}
+	
+		return inLinkIdTurnInfoMap;
+	}
+
+	
+	static Map<Id<Link>, List<TurnInfo>> createAllowedTurnInfos(Scenario sc){
+		Map<Id<Link>, List<TurnInfo>> allowedInLinkTurnInfoMap = new HashMap<>();
+	
+		NetworkTurnInfoBuilder netTurnInfoBuilder = new NetworkTurnInfoBuilder();
+		netTurnInfoBuilder.createAndAddTurnInfo(TransportMode.car, allowedInLinkTurnInfoMap, sc.getNetwork() );
+	
+		if (sc.getConfig().scenario().isUseLanes()) {
+			LaneDefinitions20 ld = sc.getLanes();
+			Map<Id<Link>, List<TurnInfo>> lanesTurnInfoMap = createTurnInfos(ld);
+			netTurnInfoBuilder.mergeTurnInfoMaps(allowedInLinkTurnInfoMap, lanesTurnInfoMap);
+		}
+		final SignalSystemsConfigGroup signalsConfig = ConfigUtils.addOrGetModule(sc.getConfig(), SignalSystemsConfigGroup.GROUPNAME, SignalSystemsConfigGroup.class);
+		if (signalsConfig.isUseSignalSystems()) {
+			SignalSystemsData ssd = ((SignalsData) sc.getScenarioElement(SignalsData.ELEMENT_NAME)).getSignalSystemsData();
+			Map<Id<Link>, List<TurnInfo>> signalsTurnInfoMap = new SignalsTurnInfoBuilder().createSignalsTurnInfos(ssd);
+			netTurnInfoBuilder.mergeTurnInfoMaps(allowedInLinkTurnInfoMap, signalsTurnInfoMap);
+		}
+		return allowedInLinkTurnInfoMap;
+	}
+
+}
-- 
2.3.2 (Apple Git-55)

