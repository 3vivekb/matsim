package playground.rost.Controller.GUI;

import java.awt.Color;
import java.awt.Graphics;

import org.apache.log4j.Logger;
import org.matsim.api.basic.v01.Id;
import org.matsim.api.core.v01.network.Link;
import org.matsim.api.core.v01.network.Node;

import playground.dressler.ea_flow.Flow;

public class FlowAnalyzeMap extends AbstractBasicMapImpl {
	
	private static final Logger log = Logger.getLogger(FlowAnalyzeMap.class);
	
	protected Id sink;
	protected Flow flow;
	protected int time;
	
	public FlowAnalyzeMap(Flow flow, Id sink)
	{
		super(flow.getNetwork());
		this.sink = sink;
		this.flow = flow;
		time = 200;
	}
	
	public synchronized void setTime(int time)
	{
		this.time = time;
		UIChange();
	}
	
	public synchronized int getTime()
	{
		return this.time;
	}

	public void paintComponent( Graphics g )
	{
		g.clearRect(0, 0, this.getWidth(),this.getHeight());
		super.paintComponents(g);
		draw_width = this.getWidth() - 2*borderX;
		draw_height = this.getHeight()- 2*borderY;
		int x,y, size;
		//draw Nodes
		for(Node node : network.getNodes().values())
		{
			if(node.getCoord().getX() < minX || node.getCoord().getX() > maxX || node.getCoord().getY() < minY || node.getCoord().getY() > maxY)
				continue;
			g.setColor(Color.RED);
			size = 1;
			size = (int)Math.ceil((size*Math.sqrt(zoom)));
			x = this.getXonPanel(node);
			y = this.getYonPanel(node);
			g.fillRect(x, y, size, size);
		}
		for(Link link : network.getLinks().values())
		{
			Node fromNode = link.getFromNode();
			if(fromNode.getCoord().getX() < minX || fromNode.getCoord().getX() > maxX || fromNode.getCoord().getY() < minY || fromNode.getCoord().getY() > maxY)
				continue;
			Node toNode = link.getToNode();
			if(toNode.getCoord().getX() < minX || toNode.getCoord().getX() > maxX || toNode.getCoord().getY() < minY || toNode.getCoord().getY() > maxY)
				continue;
			
			double cap = link.getCapacity(1);
			int flowValue = flow.getFlow().get(link).getFlowAt(time);
		
			int farbgrad = (int)( 512.0 * flowValue / cap);
			
			if(flowValue > 0)
				log.debug("flow: "+ flowValue + " -- farbgrad: " + farbgrad);
			
			if(farbgrad < 256)
			{
				g.setColor(new Color(farbgrad,255,0));
			}
			else if(farbgrad < 512)
			{
				g.setColor(new Color(255, 255 - farbgrad % 256, 0));
			}
			else
			{
				g.setColor(Color.BLACK);
			}
			x = this.getXonPanel(toNode);
			y = this.getYonPanel(toNode);
			int x2 = this.getXonPanel(fromNode);
			int y2 = this.getYonPanel(fromNode);
			g.drawLine(x, y, x2, y2);
		}
	}
}
