/* *********************************************************************** *
 * project: org.matsim.*
 * WorldUtils.java
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2007 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

package org.matsim.utils;

import java.util.ArrayList;
import java.util.Iterator;

import org.matsim.gbl.Gbl;
import org.matsim.utils.geometry.CoordI;
import org.matsim.utils.geometry.shared.Coord;
import org.matsim.world.Layer;
import org.matsim.world.Location;
import org.matsim.world.Zone;

/**
 * A collection of some helper methods for the world.<br />
 * It all started with getRandomCoordInZone, which I needed in
 * several places. Integrating into Zone didn't seem very clever,
 * as I still had to pass the layer as parameter. Thus I decided to make
 * a static method out of it.
 *
 * @author mrieser, and maybe others
 */
public class WorldUtils {

	/**
	 * Returns a random coordinate within the given zone. If the zone has its
	 * bounding box set (min and max coordinates), than a random point within
	 * this bounding box will be chosen. If the bounding box is missing, a
	 * random point within a circle with radius 0.7 * distance-to-nearest-neighbor-zone
	 * will be returned. The random point is generated by randomly choosing
	 * polar-coordinates for this point. This leads to a higher density of
	 * randomly generated points near the center of the circle when multiple
	 * random points are generated.
	 *
	 * @param zone
	 * @param layer the layer <code>zone</code> is part of
	 * @return a random coordinate within the zone
	 *
	 * @author mrieser
	 */
	public static final Coord getRandomCoordInZone(final Zone zone, final Layer layer) {
		Coord min = (Coord)zone.getMin();

		if (min != null) {
			// we know min and max of the zone-area, choose randomly in this area
			Coord max = (Coord)zone.getMax();
			double x = min.getX() + Gbl.random.nextDouble()*(max.getX() - min.getX());
			double y = min.getY() + Gbl.random.nextDouble()*(max.getY() - min.getY());
			return new Coord(x, y);
		}

		double x, y;
		// min == null, --> place the random point within a circle around the center
		// first, determine radius of circle. for this, search the nearest (neighbor) zone
		Coord center = (Coord)zone.getCenter();
		ArrayList<Location> nearestZones = layer.getNearestLocations(center, zone);
		double shortestDistance = Double.MAX_VALUE;
		Iterator<Location> zoneIter = nearestZones.iterator();
		while (zoneIter.hasNext()) {
			Zone aZone = (Zone)zoneIter.next();
			Coord zoneMin = (Coord)aZone.getMin();
			double radius;
			if (zoneMin == null) {
				// the distance is center-to-center, only take half the distance as radius
				radius = 0.7*aZone.getCenter().calcDistance(center);
			} else {
				// the other zone has an extent(min/max), so just use the full distance
				radius = aZone.calcDistance(center);
			}
			if (radius < shortestDistance) {
				shortestDistance = radius;
			}
		}
		if (shortestDistance < Double.MAX_VALUE) {
			// choose a 'random' point within the circle around 'center' with radius 'shortestDistance'
			// by choosing a random polar coordinate, the densitiy of points in the center area should
			// be higher than in the area far away from the center, which is plausible for the distribution
			// of people in a rural area with a town as a center somewhere
			double angle = Gbl.random.nextDouble()*2*Math.PI;
			double radius = Gbl.random.nextDouble()*shortestDistance;
			x = center.getX() + radius * Math.cos(angle);
			y = center.getY() + radius * Math.sin(angle);
		} else {
			x = center.getX();
			y = center.getY();
		}
		return new Coord(x, y);
	}

	/**
	 * Calculates the shortest distance of a point to a line segment. The line segment
	 * is given by two points, <code>lineFrom</code> and <code>lineTo</code>. Note that
	 * the line segment has finite length, and thus the shortest distance cannot
	 * always be the distance on the tangent to the line through <code>point</code>.
	 *
	 * @param lineFrom The start point of the line segment
	 * @param lineTo The end point of the line segment
	 * @param point The point whose distance to the line segment should be calculated
	 * @return the distance of <code>point</code> to the line segment given by the two
	 *    end points of the line segment, <code>lineFrom</code> and <code>lineTo</code>
	 *
	 * @author mrieser
	 */
	public static double distancePointLinesegment(final CoordI lineFrom, final CoordI lineTo, final Coord point) {
		/* The shortest distance is where the tangent of the line goes through "point".
		 * The dot product (point - P) dot (lineTo - lineFrom) must be 0, when P is a point
		 * on the line. P can be substituted with lineFrom + u*(lineTo - lineFrom).
		 * Thus it must be:
		 *    (point - lineFrom - u*(lineTo - lineFrom)) dot (lineTo - lineFrom) == 0
		 * From this follows:
		 *        (point.x - lineFrom.x)(lineTo.x - lineFrom.x) + (point.y - lineFrom.y)(lineTo.y - lineFrom.y)
		 *    u = ---------------------------------------------------------------------------------------------
		 *       (lineTo.x - lineFrom.x)(lineTo.x - lineFrom.x) + (lineTo.y - lineFrom.y)(lineTo.y - lineFrom.y)
		 *
		 * Substituting this gives:
		 *   x = lineFrom.x + u*(lineFrom.x - lineTo.x) , y = lineFrom.y + u*(lineFrom.y - lineTo.y)
		 *
		 * The shortest distance is now the distance between "point" and (x | y)
		 *
		 */

		double lineDX = lineTo.getX() - lineFrom.getX();
		double lineDY = lineTo.getY() - lineFrom.getY();

		if (lineDX == 0.0 && lineDY == 0.0) {
			// the line segment is a point without dimension
			return lineFrom.calcDistance(point);
		}

		double u = ((point.getX() - lineFrom.getX())*lineDX + (point.getY() - lineFrom.getY())*lineDY) /
							(lineDX*lineDX + lineDY*lineDY);

		if (u <= 0) {
			// (x | y) is not on the line segment, but before lineFrom
			return lineFrom.calcDistance(point);
		}
		if (u >= 1) {
			// (x | y) is not on the line segment, but after lineTo
			return lineTo.calcDistance(point);
		}
		return new Coord(lineFrom.getX() + u*lineDX, lineFrom.getY() + u*lineDY).calcDistance(point);
	}

}
