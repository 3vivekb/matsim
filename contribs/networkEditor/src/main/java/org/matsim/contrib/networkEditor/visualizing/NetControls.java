/* *********************************************************************** *
 * project: org.matsim.contrib.networkEditor
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2010 Daniel Ampuero
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

package org.matsim.contrib.networkEditor.visualizing;

import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.AbstractTableModel;

import org.matsim.api.core.v01.network.Node;
import org.matsim.core.network.LinkImpl;

/**
 * @author danielmaxx
 */
public class NetControls extends javax.swing.JPanel {

	public NetBlackboard board;
	private MyTableModel tableModel;
	public DifferenceManager diffManager;
	public CountList countList;
	private boolean selected[];
	private final int numToggle = NetBlackboard.mode.values().length;
	javax.swing.JToggleButton toggles[];

	/** Creates new form NetControls */
	public NetControls(NetBlackboard b) {
		board = b;
		tableModel = new MyTableModel();
		initComponents();
		toggles = new javax.swing.JToggleButton[numToggle];
		toggles[1] = buttonToggleMove;
		toggles[2] = buttonToggleSelect;
		toggles[3] = buttonTogglePaint;
		toggles[4] = buttonToggleScissor;
		selected = new boolean[numToggle];
		selected[0] = true;
		for(int i=1; i<numToggle; ++i) {
			selected[i] = false;
			toggles[i].setSelected(false);
		}
		setButtonsEnabled(false);
	}

	public void setNetBlackboard(NetBlackboard b) {
		board = b;
	}

	public void setDifferenceManager(DifferenceManager diffManager) {
		this.diffManager = diffManager;
	}

	public void setButtonsEnabled(boolean value) {
		this.buttonDelete.setEnabled(value);
		this.buttonDown.setEnabled(value);
		this.buttonRight.setEnabled(value);
		this.buttonLeft.setEnabled(value);
		this.buttonUp.setEnabled(value);
		this.buttonZoomIn.setEnabled(value);
		this.buttonZoomOut.setEnabled(value);
		this.buttonToggleMove.setEnabled(value);
		this.buttonToggleSelect.setEnabled(value);
		this.buttonTogglePaint.setEnabled(value);
		this.buttonToggleScissor.setEnabled(value);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		buttonUp = new javax.swing.JButton();
		buttonRight = new javax.swing.JButton();
		buttonDown = new javax.swing.JButton();
		buttonLeft = new javax.swing.JButton();
		jPanel3 = new javax.swing.JPanel();
		buttonZoomIn = new javax.swing.JButton();
		buttonZoomOut = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTable1 =  new javax.swing.JTable() {

			@Override
			public java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer renderer,
					int row, int column) {
				java.awt.Component comp = super.prepareRenderer(renderer, row, column);
				if(column == 0){
					comp.setForeground(java.awt.Color.GRAY);
				}else if (getModel().isCellEditable(row, column)) {
					comp.setForeground(java.awt.Color.BLACK);
				} else {
					comp.setForeground(java.awt.Color.LIGHT_GRAY);
				}
				return comp;
			}
		};
		jPanel4 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		buttonToggleMove = new javax.swing.JToggleButton();
		buttonToggleSelect = new javax.swing.JToggleButton();
		buttonTogglePaint = new javax.swing.JToggleButton();
		buttonDelete = new javax.swing.JButton();
		jPanel5 = new javax.swing.JPanel();
		undoButton = new javax.swing.JButton();
		redoButton = new javax.swing.JButton();
		buttonToggleScissor = new javax.swing.JToggleButton();
		jLabel1 = new javax.swing.JLabel();

		setBackground(java.awt.Color.white);
		setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
			@Override
			public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
			}
			@Override
			public void ancestorResized(java.awt.event.HierarchyEvent evt) {
				formAncestorResized(evt);
			}
		});

		jPanel1.setBackground(java.awt.Color.white);
		jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
		jPanel1.setOpaque(false);

		buttonUp.setBackground(java.awt.Color.white);
		buttonUp.setFont(new java.awt.Font("DejaVu Sans", 0, 18));
		buttonUp.setForeground(java.awt.Color.darkGray);
		buttonUp.setText("↑");
		buttonUp.setToolTipText("Mover arriba");
		buttonUp.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
		buttonUp.setEnabled(false);
		buttonUp.setMaximumSize(new java.awt.Dimension(20, 20));
		buttonUp.setMinimumSize(new java.awt.Dimension(20, 20));
		buttonUp.setPreferredSize(new java.awt.Dimension(22, 22));
		buttonUp.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonUpActionPerformed(evt);
			}
		});

		buttonRight.setBackground(java.awt.Color.white);
		buttonRight.setFont(new java.awt.Font("DejaVu Sans", 0, 18));
		buttonRight.setForeground(java.awt.Color.darkGray);
		buttonRight.setText("→");
		buttonRight.setToolTipText("Mover derecha");
		buttonRight.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
		buttonRight.setEnabled(false);
		buttonRight.setMaximumSize(new java.awt.Dimension(20, 20));
		buttonRight.setMinimumSize(new java.awt.Dimension(20, 20));
		buttonRight.setPreferredSize(new java.awt.Dimension(22, 22));
		buttonRight.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonRightActionPerformed(evt);
			}
		});

		buttonDown.setBackground(java.awt.Color.white);
		buttonDown.setFont(new java.awt.Font("DejaVu Sans", 0, 18));
		buttonDown.setForeground(java.awt.Color.darkGray);
		buttonDown.setText("↓");
		buttonDown.setToolTipText("Mover abajo");
		buttonDown.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
		buttonDown.setEnabled(false);
		buttonDown.setMaximumSize(new java.awt.Dimension(20, 20));
		buttonDown.setMinimumSize(new java.awt.Dimension(20, 20));
		buttonDown.setPreferredSize(new java.awt.Dimension(22, 22));
		buttonDown.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonDownActionPerformed(evt);
			}
		});

		buttonLeft.setBackground(java.awt.Color.white);
		buttonLeft.setFont(new java.awt.Font("DejaVu Sans", 0, 18));
		buttonLeft.setForeground(java.awt.Color.darkGray);
		buttonLeft.setText("←");
		buttonLeft.setToolTipText("Mover izquierda");
		buttonLeft.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
		buttonLeft.setEnabled(false);
		buttonLeft.setMaximumSize(new java.awt.Dimension(20, 20));
		buttonLeft.setMinimumSize(new java.awt.Dimension(20, 20));
		buttonLeft.setPreferredSize(new java.awt.Dimension(22, 22));
		buttonLeft.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonLeftActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
						.addComponent(buttonLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(buttonUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(buttonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(buttonRight, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
				);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addComponent(buttonUp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(buttonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addGap(18, 18, 18)
								.addComponent(buttonLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(jPanel1Layout.createSequentialGroup()
										.addGap(17, 17, 17)
										.addComponent(buttonRight, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
				);

		jPanel3.setBackground(java.awt.Color.white);
		jPanel3.setOpaque(false);

		buttonZoomIn.setBackground(java.awt.Color.white);
		buttonZoomIn.setText("+");
		buttonZoomIn.setToolTipText("Zoom in");
		buttonZoomIn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		buttonZoomIn.setEnabled(false);
		buttonZoomIn.setMaximumSize(new java.awt.Dimension(23, 23));
		buttonZoomIn.setMinimumSize(new java.awt.Dimension(23, 23));
		buttonZoomIn.setPreferredSize(new java.awt.Dimension(23, 23));
		buttonZoomIn.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonZoomInActionPerformed(evt);
			}
		});

		buttonZoomOut.setBackground(java.awt.Color.white);
		buttonZoomOut.setText("-");
		buttonZoomOut.setToolTipText("Zoom out");
		buttonZoomOut.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		buttonZoomOut.setEnabled(false);
		buttonZoomOut.setMaximumSize(new java.awt.Dimension(23, 23));
		buttonZoomOut.setMinimumSize(new java.awt.Dimension(23, 23));
		buttonZoomOut.setPreferredSize(new java.awt.Dimension(23, 23));
		buttonZoomOut.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonZoomOutActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addComponent(buttonZoomOut, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
								.addComponent(buttonZoomIn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
								.addContainerGap())
				);
		jPanel3Layout.setVerticalGroup(
				jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel3Layout.createSequentialGroup()
						.addComponent(buttonZoomIn, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
						.addGap(8, 8, 8)
						.addComponent(buttonZoomOut, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
				);

		jScrollPane1.setBorder(null);

		jTable1.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {

				},
				new String [] {
						"Property", "Value"
				}
				));
		jScrollPane1.setViewportView(jTable1);

		jPanel4.setBackground(java.awt.Color.white);
		jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(
				jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 248, Short.MAX_VALUE)
				);
		jPanel4Layout.setVerticalGroup(
				jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 124, Short.MAX_VALUE)
				);

		jPanel2.setBackground(java.awt.Color.white);
		jPanel2.setOpaque(false);

		buttonToggleMove.setBackground(java.awt.Color.white);
		buttonToggleMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/hand.gif"))); // NOI18N
		buttonToggleMove.setToolTipText("Mover");
		buttonToggleMove.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		buttonToggleMove.setEnabled(false);
		buttonToggleMove.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonToggleMoveActionPerformed(evt);
			}
		});

		buttonToggleSelect.setBackground(java.awt.Color.white);
		buttonToggleSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/pointer1.png"))); // NOI18N
		buttonToggleSelect.setToolTipText("Seleccionar");
		buttonToggleSelect.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		buttonToggleSelect.setEnabled(false);
		buttonToggleSelect.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonToggleSelectActionPerformed(evt);
			}
		});

		buttonTogglePaint.setBackground(java.awt.Color.white);
		buttonTogglePaint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/pointer3.png"))); // NOI18N
		buttonTogglePaint.setToolTipText("Trazar");
		buttonTogglePaint.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		buttonTogglePaint.setEnabled(false);
		buttonTogglePaint.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonTogglePaintActionPerformed(evt);
			}
		});

		buttonDelete.setBackground(java.awt.Color.white);
		buttonDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/delete.png"))); // NOI18N
		buttonDelete.setToolTipText("Eliminar enlace");
		buttonDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		buttonDelete.setEnabled(false);
		buttonDelete.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonDeleteActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(buttonToggleMove, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(buttonToggleSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(buttonTogglePaint)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(buttonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap())
				);
		jPanel2Layout.setVerticalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
										.addComponent(buttonToggleSelect, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(buttonTogglePaint, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
										.addComponent(buttonToggleMove, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
										.addComponent(buttonDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
										.addContainerGap())
				);

		jPanel5.setBackground(java.awt.Color.white);

		undoButton.setBackground(java.awt.Color.white);
		undoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/undo.png"))); // NOI18N
		undoButton.setToolTipText("Undo");
		undoButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		undoButton.setContentAreaFilled(false);
		undoButton.setEnabled(false);
		undoButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				undoButtonActionPerformed(evt);
			}
		});

		redoButton.setBackground(java.awt.Color.white);
		redoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/redo.png"))); // NOI18N
		redoButton.setToolTipText("Redo");
		redoButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		redoButton.setContentAreaFilled(false);
		redoButton.setEnabled(false);
		redoButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				redoButtonActionPerformed(evt);
			}
		});

		buttonToggleScissor.setBackground(java.awt.Color.white);
		buttonToggleScissor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/matsim/contrib/networkEditor/images/scissors.png"))); // NOI18N
		buttonToggleScissor.setToolTipText("Dividir enlace");
		buttonToggleScissor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		buttonToggleScissor.setEnabled(false);
		buttonToggleScissor.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				buttonToggleScissorActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
		jPanel5.setLayout(jPanel5Layout);
		jPanel5Layout.setHorizontalGroup(
				jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel5Layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(undoButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(redoButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(buttonToggleScissor)
						.addContainerGap(78, Short.MAX_VALUE))
				);
		jPanel5Layout.setVerticalGroup(
				jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(undoButton)
				.addComponent(redoButton)
				.addComponent(buttonToggleScissor, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
				);

		undoButton.getAccessibleContext().setAccessibleName("undoButton");

		jLabel1.setText("Counts:");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
										.addContainerGap()
										.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
										.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
												.addGap(22, 22, 22)
												.addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
												.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
														.addGap(32, 32, 32)
														.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
																.addContainerGap()
																.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																		.addGroup(layout.createSequentialGroup()
																				.addGap(12, 12, 12)
																				.addComponent(jLabel1))
																				.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
																				.addGroup(layout.createSequentialGroup()
																						.addContainerGap()
																						.addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
																						.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jLabel1)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(60, 60, 60))
				);

		countList = new CountList(this);
		jPanel4.add(countList);

	}// </editor-fold>//GEN-END:initComponents

	private void buttonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpActionPerformed
		board.moveViewBox(0, -getHeight()*0.02);
		board.repaint();
	}//GEN-LAST:event_buttonUpActionPerformed

	private void buttonRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRightActionPerformed
		board.moveViewBox(getWidth()*0.02, 0);
		board.repaint();
	}//GEN-LAST:event_buttonRightActionPerformed

	private void buttonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDownActionPerformed
		board.moveViewBox(0, getHeight()*0.02);
		board.repaint();
	}//GEN-LAST:event_buttonDownActionPerformed

	private void buttonLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLeftActionPerformed
		board.moveViewBox(-getWidth()*0.02, 0);
		board.repaint();
	}//GEN-LAST:event_buttonLeftActionPerformed

	private void buttonZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZoomInActionPerformed
		board.zoom(0.03);
		board.repaint();
	}//GEN-LAST:event_buttonZoomInActionPerformed

	private void buttonZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonZoomOutActionPerformed
		board.zoom(-0.02);
		board.repaint();
	}//GEN-LAST:event_buttonZoomOutActionPerformed

	private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
		this.setSize(this.getParent().getSize());
		this.repaint();
	}//GEN-LAST:event_formAncestorResized

	private void buttonTogglePaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTogglePaintActionPerformed
		checkToggle(3);
	}//GEN-LAST:event_buttonTogglePaintActionPerformed

	private void buttonToggleSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToggleSelectActionPerformed
		checkToggle(2);
	}//GEN-LAST:event_buttonToggleSelectActionPerformed

	private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
		board.activeLink = null;
		board.activeNode = null;
		diffManager.undo();
		board.updateSelectedLinkList();
		updateButtons();
		updateTable();
		board.repaint();
	}//GEN-LAST:event_undoButtonActionPerformed

	private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
		board.activeLink = null;
		board.activeNode = null;
		diffManager.redo();
		board.updateSelectedLinkList();
		updateButtons();
		updateTable();
		board.repaint();
	}//GEN-LAST:event_redoButtonActionPerformed

	private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
		// TODO add your handling code here:
		board.deleteActiveLinks();
		updateTable();
	}//GEN-LAST:event_buttonDeleteActionPerformed

	private void buttonToggleMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToggleMoveActionPerformed
		checkToggle(1);        
	}//GEN-LAST:event_buttonToggleMoveActionPerformed

	private void buttonToggleScissorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToggleScissorActionPerformed
		checkToggle(4);        
	}//GEN-LAST:event_buttonToggleScissorActionPerformed

	private void checkToggle(int cT) {
		if(selected[cT]==false) {
			setToogle(cT);
		} else {
			selected[cT]=false;
			toggles[cT].setSelected(false);
		}
		updateBoardState();
	}

	private void setToogle(int t) {
		for(int i=0; i<this.numToggle; ++i){
			selected[i] = i==t;
			if(i>0)
				toggles[i].setSelected(i==t);
		}
	}

	private void updateBoardState() {
		NetBlackboard.mode modes[] = NetBlackboard.mode.values();
		for(int i=0; i<selected.length; ++i) {
			if(selected[i]==true) {
				board.setMode(modes[i]);
				break;
			}
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton buttonDelete;
	private javax.swing.JButton buttonDown;
	private javax.swing.JButton buttonLeft;
	private javax.swing.JButton buttonRight;
	private javax.swing.JToggleButton buttonToggleMove;
	private javax.swing.JToggleButton buttonTogglePaint;
	private javax.swing.JToggleButton buttonToggleScissor;
	private javax.swing.JToggleButton buttonToggleSelect;
	private javax.swing.JButton buttonUp;
	private javax.swing.JButton buttonZoomIn;
	private javax.swing.JButton buttonZoomOut;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable jTable1;
	private javax.swing.JButton redoButton;
	private javax.swing.JButton undoButton;
	// End of variables declaration//GEN-END:variables


	/*public Component getTableCellRendererComponent(
        JTable table, Object value, boolean isSelected,
        boolean hasFocus, int row, int col) {
        Component comp = super.getTableCellRendererComponent(
                      table,  value, isSelected, hasFocus, row, col);
        String s =  table.getModel().getValueAt(row, VALIDATION_COLUMN ).toString();
         if(s.equalsIgnoreCase("Fail")) {
            comp.setForeground(Color.red);
        } else {
            comp.setForeground(null);
        }
        return( comp );
    }*/

	public void updateTable() {
		tableModel = new MyTableModel();
		if(board.activeLink != null) tableModel = new MyTableModel(board.activeLink);
		if(board.activeNode != null) tableModel = new MyTableModel(board.activeNode);
		jTable1.setModel(tableModel);
		jTable1.setVisible(true);
		jTable1.getModel().addTableModelListener(new MyTableModelListener(this));
		//jTable1.pre
		jTable1.repaint();
		this.countList.updateTable();
	}

	public void updateButtons() {
		if(board.diffManager.getBackSize() < 1)
			this.undoButton.setEnabled(false);
		else
			this.undoButton.setEnabled(true);
		if(board.diffManager.getFrontSize() < 1)
			this.redoButton.setEnabled(false);
		else
			this.redoButton.setEnabled(true);
	}

}

class MyTableModel extends AbstractTableModel {
	private String table[][];
	private String columnName[];
	private boolean editable[][];
	private int rows, cols;
	public enum mode{LINK, NODE, NONE};
	mode actualMode;
	public LinkImpl activeLink;
	public Node activeNode;

	public MyTableModel(){
		rows = cols = 0;
		actualMode = mode.NONE;
	}

	public MyTableModel(LinkImpl activeLink) {
		this.activeLink = activeLink;
		init(11, 2);
		actualMode = mode.LINK;

		table[0][0] = new String("Capacidad");
		table[0][1] = new String(Double.toString(activeLink.getCapacity()));
		editable[0][1] = true;

		table[1][0] = new String("Longuitud euclidiana");
		table[1][1] = new String(Double.toString(activeLink.getEuklideanDistance()));

		table[2][0] = new String("Capacidad de flujo");
		table[2][1] = new String(Double.toString(activeLink.getFlowCapacity()));
		//editable[2][1] = true;

		table[3][0] = new String("Velocidad libre");
		table[3][1] = new String(Double.toString(activeLink.getFreespeed()));
		editable[3][1] = true;

		table[4][0] = new String("Tiempo de viaje en velocidad libre");
		table[4][1] = new String(Double.toString(activeLink.getFreespeedTravelTime()));
		//editable[4][1] = true;

		table[5][0] = new String("Longuitud");
		table[5][1] = new String(Double.toString(activeLink.getLength()));
		editable[5][1] = true;

		table[6][0] = new String("Numero de Canales");
		table[6][1] = new String(Double.toString(activeLink.getNumberOfLanes()));
		editable[6][1] = true;

		table[7][0] = new String("Nodo fuente");
		table[7][1] = new String(activeLink.getFromNode().getId().toString());

		table[8][0] = new String("Nodo destino");
		table[8][1] = new String(activeLink.getToNode().getId().toString());

		table[9][0] = new String("Id");
		table[9][1] = new String(activeLink.getId().toString());

		table[10][0] = new String("Coordenadas");
		table[10][1] = new String(activeLink.getCoord().toString());


	}

	public MyTableModel(Node activeNode) {
		init(2,2);
		this.activeNode = activeNode;
		actualMode = mode.NODE;

		table[0][0] = new String("Id");
		table[0][1] = new String(activeNode.getId().toString());
		table[1][0] = new String("Coordenadas");
		table[1][1] = new String(activeNode.getCoord().toString());
	}

	private void init(int r, int c) {
		table = new String[r][c];
		editable = new boolean[r][c];
		for(int i=0; i<editable.length; ++i) for(int j=0; j<editable[i].length; ++j) editable[i][j] = false;
		columnName = new String[c];
		columnName[0] = new String("Propiedad");
		columnName[1] = new String("Valor");
		rows = r;
		cols = c;
	}

	/**
	 * Returns the number of rows in the model. A
	 * <code>JTable</code> uses this method to determine how many rows it
	 * should display.  This method should be quick, as it
	 * is called frequently during rendering.
	 *
	 * @return the number of rows in the model
	 * @see #getColumnCount
	 */
	@Override
	public int getRowCount(){
		return rows;
	}

	/**
	 * Returns the number of columns in the model. A
	 * <code>JTable</code> uses this method to determine how many columns it
	 * should create and display by default.
	 *
	 * @return the number of columns in the model
	 * @see #getRowCount
	 */
	@Override
	public int getColumnCount() {
		return cols;
	}

	/**
	 * Returns the name of the column at <code>columnIndex</code>.  This is used
	 * to initialize the table's column header name.  Note: this name does
	 * not need to be unique; two columns in a table can have the same name.
	 *
	 * @param	columnIndex	the index of the column
	 * @return  the name of the column
	 */
	@Override
	public String getColumnName(int columnIndex) {
		return columnName[columnIndex];
	}

	/**
	 * Returns the most specific superclass for all the cell values 
	 * in the column.  This is used by the <code>JTable</code> to set up a 
	 * default renderer and editor for the column.
	 *
	 * @param columnIndex  the index of the column
	 * @return the common ancestor class of the object values in the model.
	 */
	@Override
	public Class<?> getColumnClass(int columnIndex) {
		return this.getValueAt(0, columnIndex).getClass();
	}

	/**
	 * Returns true if the cell at <code>rowIndex</code> and
	 * <code>columnIndex</code>
	 * is editable.  Otherwise, <code>setValueAt</code> on the cell will not
	 * change the value of that cell.
	 *
	 * @param	rowIndex	the row whose value to be queried
	 * @param	columnIndex	the column whose value to be queried
	 * @return	true if the cell is editable
	 * @see #setValueAt
	 */
	@Override
	public boolean isCellEditable(int rowIndex, int columnIndex) {
		return editable[rowIndex][columnIndex];
	}

	/**
	 * Returns the value for the cell at <code>columnIndex</code> and
	 * <code>rowIndex</code>.
	 *
	 * @param	rowIndex	the row whose value is to be queried
	 * @param	columnIndex 	the column whose value is to be queried
	 * @return	the value Object at the specified cell
	 */
	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		return table[rowIndex][columnIndex];
	}

	/**
	 * Sets the value in the cell at <code>columnIndex</code> and
	 * <code>rowIndex</code> to <code>aValue</code>.
	 *
	 * @param	aValue		 the new value
	 * @param	rowIndex	 the row whose value is to be changed
	 * @param	columnIndex 	 the column whose value is to be changed
	 * @see #getValueAt
	 * @see #isCellEditable
	 */
	@Override
	public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
		table[rowIndex][columnIndex] = aValue.toString();
		fireTableCellUpdated(rowIndex, columnIndex);
	}

}

class MyTableModelListener implements TableModelListener {
	public NetControls controls;

	MyTableModelListener(NetControls c) {
		controls = c;
	}

	@Override
	public void tableChanged(TableModelEvent evt) {
		MyTableModel tableModel = (MyTableModel)evt.getSource();
		//System.out.println("FUCK THIS!");
		if (evt.getType() == TableModelEvent.UPDATE) {
			int column = evt.getColumn();
			int row = evt.getFirstRow();
			//System.out.println("row: " + row + " column: " + column);
			if(tableModel.actualMode == MyTableModel.mode.NONE) return;
			if(tableModel.actualMode == MyTableModel.mode.NODE) return;
			if(tableModel.actualMode == MyTableModel.mode.LINK){
				if(tableModel.isCellEditable(row, column)== false) return;
				String rawdata = (String)tableModel.getValueAt(row, column);
				double data = 0.0;
				try {
					data = Double.parseDouble(rawdata);
				} catch (Exception e) {
					javax.swing.JOptionPane.showMessageDialog(controls, "Los valores deben ser numéricos", "Error de formato", javax.swing.JOptionPane.WARNING_MESSAGE);
					controls.updateTable();
					//e.printStackTrace();
					return;
				}
				controls.diffManager.saveState(controls.diffManager.cloneLink(tableModel.activeLink), DifferenceManager.type.EDIT, null, null, null, null, null, null, null, null);
				if(row == 0) {
					tableModel.activeLink.setCapacity(data);
					controls.board.setMinMaxCaps();
				} else if(row == 3)
					tableModel.activeLink.setFreespeed(data);
				else if(row == 5)
					tableModel.activeLink.setLength(data);
				else if(row == 6)
					tableModel.activeLink.setNumberOfLanes(data);
				controls.updateTable();
				controls.updateButtons();
			}
		}
	}
}
