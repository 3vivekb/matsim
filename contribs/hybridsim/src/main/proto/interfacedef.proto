syntax = "proto3";
option java_generic_services = false;
//option java_outer_classname="ProtoMATSimInterface";
option java_package = "org.matsim.contrib.hybridsim.interfacedef";

package org.matsim.contrib.hybridsim;

message MATSim2ExternPutAgent {
	message Agent {
		 string id = 1;
		 string enterNode = 2;
		 string leaveNode = 3;
	}

	 Agent agent = 1;
}



message MATSim2ExternHasSpace {
	 string nodeId = 1;
}
message MATSim2ExternHasSpaceConfirmed {
	 bool hasSpace = 1;
}

message MATSim2ExternPutAgentConfirmed {
}

message Extern2MATSimTrajectories {
     message Agent {
           int32 id = 1;
           double x = 2;
           double y = 3;
           double z = 4;
           int32 color = 5;
           double angle = 6;
     }

     repeated Agent agent = 15;
}


//     message Agent {
//           int32 id = 1;
//           double x = 2;
//           double y = 3;
//           double z = 4;
//           int32 color = 5;
//           double angle = 6;
//     }
//
//      double time = 1;
//     repeated Agent agent = 2;

message MATSim2ExternTrajectoriesReceived {
}

message Extern2MATSim {
	message Agent {
		 string id = 1;
		 string leaveNode = 2;
	}
	 Agent agent = 1;

}

message Extern2MATSimConfirmed {

	 bool accepted = 1;
}

message ExternSimStepFinished {
	 double time = 1;
}
message ExternSimStepFinishedReceived {
}

message ExternDoSimStep {
	 double fromTime = 1;
	 double toTime = 2;
}

message ExternDoSimStepReceived {

}

message ExternalConnect {
	 string host = 1;
	 int32 port = 2;
}


message ExternalConnectConfirmed {
}

message ExternOnPrepareSim {

}

message ExternOnPrepareSimConfirmed {

}
message ExternAfterSim {

}

message ExternAfterSimConfirmed {

}
message AgentsStuck {
	repeated string agentId = 1;
}

message AgentsStuckConfirmed{

}

message MaximumNumberOfAgents {

}

message MaximumNumberOfAgentsConfirmed {
	 int32 number = 1;
}
service MATSimInterfaceService {
	rpc reqExtern2MATSim(Extern2MATSim) returns (Extern2MATSimConfirmed);
	rpc reqAgentStuck(AgentsStuck) returns (AgentsStuckConfirmed);
	rpc reqExternalConnect(ExternalConnect) returns (ExternalConnectConfirmed);
	rpc reqExternSimStepFinished(ExternSimStepFinished) returns (ExternSimStepFinishedReceived);
	rpc reqMaximumNumberOfAgents(MaximumNumberOfAgents) returns (MaximumNumberOfAgentsConfirmed);
	    // sent the trajectories
    rpc reqSendTrajectories(Extern2MATSimTrajectories) returns (MATSim2ExternTrajectoriesReceived);
}

service ExternInterfaceService {
	rpc reqMATSim2ExternHasSpace(MATSim2ExternHasSpace)returns (MATSim2ExternHasSpaceConfirmed);
	rpc reqMATSim2ExternPutAgent(MATSim2ExternPutAgent) returns (MATSim2ExternPutAgentConfirmed);
	rpc reqExternDoSimStep(ExternDoSimStep) returns (ExternDoSimStepReceived);
	rpc reqExternOnPrepareSim(ExternOnPrepareSim) returns (ExternOnPrepareSimConfirmed);
	rpc reqExternAfterSim(ExternAfterSim) returns (ExternAfterSimConfirmed);

}

