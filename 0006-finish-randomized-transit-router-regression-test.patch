From e61a6dcce29af8181f23399ed71751d274e519c6 Mon Sep 17 00:00:00 2001
From: Kai Nagel <2008@kainagel.org>
Date: Sat, 18 Jul 2015 14:55:24 +0200
Subject: [PATCH 06/16] finish randomized transit router regression test

---
 .../RandomizedTransitRouterTest.java               | 78 +++++++++++++++++++++-
 1 file changed, 76 insertions(+), 2 deletions(-)

diff --git a/contribs/common/src/test/java/org/matsim/contrib/common/randomizedtransitrouter/RandomizedTransitRouterTest.java b/contribs/common/src/test/java/org/matsim/contrib/common/randomizedtransitrouter/RandomizedTransitRouterTest.java
index f15ccd6..4df27e9 100644
--- a/contribs/common/src/test/java/org/matsim/contrib/common/randomizedtransitrouter/RandomizedTransitRouterTest.java
+++ b/contribs/common/src/test/java/org/matsim/contrib/common/randomizedtransitrouter/RandomizedTransitRouterTest.java
@@ -18,31 +18,76 @@
  * *********************************************************************** */
 package org.matsim.contrib.common.randomizedtransitrouter;
 
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import junit.framework.Assert;
+
+import org.apache.log4j.Logger;
 import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
+import org.matsim.api.core.v01.Id;
 import org.matsim.api.core.v01.Scenario;
+import org.matsim.api.core.v01.TransportMode;
+import org.matsim.api.core.v01.events.PersonEntersVehicleEvent;
+import org.matsim.api.core.v01.events.handler.PersonEntersVehicleEventHandler;
 import org.matsim.core.config.Config;
 import org.matsim.core.config.ConfigUtils;
 import org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams;
+import org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams;
+import org.matsim.core.config.groups.QSimConfigGroup.TrafficDynamics;
 import org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings;
 import org.matsim.core.config.groups.VspExperimentalConfigGroup.VspDefaultsCheckingLevel;
+import org.matsim.core.controler.AbstractModule;
 import org.matsim.core.controler.Controler;
 import org.matsim.core.replanning.DefaultPlanStrategiesModule.DefaultSelector;
 import org.matsim.core.replanning.DefaultPlanStrategiesModule.DefaultStrategy;
 import org.matsim.core.scenario.ScenarioUtils;
 import org.matsim.testcases.MatsimTestUtils;
+import org.matsim.vehicles.Vehicle;
 
 /**
  * @author nagel
  *
  */
 public class RandomizedTransitRouterTest {
+	private static Logger log = Logger.getLogger( RandomizedTransitRouterTest.class ) ;
 	
+	private static final class MyObserver implements PersonEntersVehicleEventHandler {
+//		private enum ObservedVehicle{ pt_1009_1 /*direct, fast, with wait*/, pt_2009_1 /*direct, slow*/, pt_3009_1 /*with interchange*/} ;
+		
+		Map<Id<Vehicle>,Double> cnts = new HashMap<>() ;		
+
+		@Override public void reset(int iteration) {
+			cnts.clear();
+		}
+
+		@Override public void handleEvent(PersonEntersVehicleEvent event) {
+			final Double oldVal = cnts.get( event.getVehicleId() );
+			if ( oldVal!= null ) {
+				cnts.put( event.getVehicleId(), oldVal + 1. ) ;
+			} else {
+				cnts.put( event.getVehicleId(), 1. ) ;
+			}
+		}
+		
+		void printCounts() {
+			for ( Entry<Id<Vehicle>, Double> entry : cnts.entrySet() ) {
+				log.info( "Vehicle id: " + entry.getKey() + "; number of boards: " + entry.getValue() ) ;
+			}
+		}
+		
+		Map< Id<Vehicle>, Double> getCounts() {
+			return this.cnts ;
+		}
+	}
+
 	@Rule public MatsimTestUtils utils = new MatsimTestUtils() ;
 
 	@Test
-	@Ignore
+//	@Ignore
 	public final void test() {
 		String scenarioDir = utils.getPackageInputDirectory() ;
 		String outputDir = utils.getOutputDirectory() ;
@@ -57,7 +102,10 @@ public class RandomizedTransitRouterTest {
 		config.transit().setUseTransit(true);
 		
 		config.controler().setOutputDirectory( outputDir );
-		config.controler().setLastIteration(100);
+		config.controler().setLastIteration(20);
+		
+		config.global().setNumberOfThreads(1);
+		
 		{
 			ActivityParams params = new ActivityParams("home") ;
 			params.setTypicalDuration( 6*3600. );
@@ -81,6 +129,14 @@ public class RandomizedTransitRouterTest {
 			config.strategy().addStrategySettings(stratSets);
 		}
 		
+		config.qsim().setEndTime(18.*3600.);
+		
+		config.timeAllocationMutator().setMutationRange(7200);
+		config.timeAllocationMutator().setAffectingDuration(false);
+		config.plans().setRemovingUnneccessaryPlanAttributes(true);
+		config.qsim().setTrafficDynamics( TrafficDynamics.withHoles );
+		config.qsim().setUsingFastCapacityUpdate(true);
+		
 		config.vspExperimental().setWritingOutputEvents(true);
 		config.vspExperimental().setVspDefaultsCheckingLevel( VspDefaultsCheckingLevel.warn );
 		
@@ -91,11 +147,29 @@ public class RandomizedTransitRouterTest {
 		// ---
 		
 		Controler controler = new Controler( scenario ) ;
+		controler.setDirtyShutdown(true);
+		
+		controler.addOverridingModule( new RandomizedTransitRouterModule() );
+
+		final MyObserver observer = new MyObserver();
+		controler.getEvents().addHandler(observer);
 		
 		controler.run();
 		
 		// ---
 		
+		observer.printCounts(); 
+		
+		// the following is just a regression test, making sure that results remain stable.  In general, the randomized transit router 
+		// could be improved, for example along the lines of the randomized regular router, which uses a (hopefully unbiased) lognormal
+		// distribution rather than a biased uniform distribution as is used here.  kai, jul'15
+		
+		Assert.assertEquals(36., observer.getCounts().get( Id.create("1009", Vehicle.class) ) );
+		Assert.assertEquals( 6., observer.getCounts().get( Id.create("1012", Vehicle.class) ) );
+		Assert.assertEquals(21., observer.getCounts().get( Id.create("2009", Vehicle.class) ) );
+		Assert.assertEquals(36., observer.getCounts().get( Id.create("3009", Vehicle.class) ) );
+		
+		
 	}
 
 }
-- 
2.3.2 (Apple Git-55)

