From 54dbcecad896e9fedb8bbd62ef17702a9ef17d47 Mon Sep 17 00:00:00 2001
From: Kai Nagel <2008@kainagel.org>
Date: Thu, 23 Jul 2015 15:44:07 +0100
Subject: [PATCH 10/16] parking maintenance

---
 .../contribs/parking/PC2/GeneralParkingModule.java  |  9 ++--
 .../parking/PC2/scoring/ParkingScoreManager.java   | 48 ++++++++----------
 .../simulation/ParkingInfrastructureManager.java   | 20 ++++----
 .../parking/example/ParkingBetaExample.java        |  2 -
 .../example/ParkingCostCalculatorExample.java      |  4 +-
 .../org/matsim/contrib/parking/lib/GeneralLib.java |  9 ++--
 .../contribs/parking/run/RunParkingExample.java     | 57 ++++++++--------------
 .../SetupParkingForZHScenario.java                 |  2 +-
 8 files changed, 61 insertions(+), 90 deletions(-)

diff --git a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/GeneralParkingModule.java b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/GeneralParkingModule.java
index ed2bfc9..9bf68ba 100644
--- a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/GeneralParkingModule.java
+++ b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/GeneralParkingModule.java
@@ -1,6 +1,5 @@
 package org.matsim.contrib.parking.PC2;
 
-import org.matsim.contrib.parking.PC2.scoring.ParkingCostModel;
 import org.matsim.contrib.parking.PC2.scoring.ParkingScoreManager;
 import org.matsim.contrib.parking.PC2.simulation.ParkingChoiceSimulation;
 import org.matsim.contrib.parking.PC2.simulation.ParkingInfrastructureManager;
@@ -17,7 +16,6 @@ import org.matsim.core.controler.listener.StartupListener;
 public class GeneralParkingModule implements StartupListener, IterationStartsListener,BeforeMobsimListener, IterationEndsListener {
 
 	private Controler controler;
-	private ParkingCostModel parkingCostModel; // TODO: don't overwrite parking cost model from config, if already set.
 	private ParkingScoreManager parkingScoreManager;
 	public ParkingScoreManager getParkingScoreManager() {
 		return parkingScoreManager;
@@ -36,10 +34,6 @@ public class GeneralParkingModule implements StartupListener, IterationStartsLis
 		controler.addControlerListener(this);
 	}
 	
-	public void setParkingCostModel(ParkingCostModel parkingCostModel){
-		this.parkingCostModel= parkingCostModel;
-	}
-	
 	@Override
 	public void notifyStartup(StartupEvent event) {
 		parkingSimulation = new ParkingChoiceSimulation(controler, parkingInfrastructureManager);
@@ -60,6 +54,9 @@ public class GeneralParkingModule implements StartupListener, IterationStartsLis
 		this.parkingInfrastructureManager = parkingInfrastructureManager;
 	}
 
+	@Deprecated
+	// lower level objects may keep back pointers to higher level objects if they have to, but we prefer that they do not provide them
+	// as a service. kai, apr'15
 	public Controler getControler() {
 		return controler;
 	}
diff --git a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/scoring/ParkingScoreManager.java b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/scoring/ParkingScoreManager.java
index 30d17a9..258e66f 100644
--- a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/scoring/ParkingScoreManager.java
+++ b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/scoring/ParkingScoreManager.java
@@ -18,8 +18,11 @@
  * *********************************************************************** */
 package org.matsim.contrib.parking.PC2.scoring;
 
+import java.util.Map;
+
 import org.matsim.api.core.v01.Coord;
 import org.matsim.api.core.v01.Id;
+import org.matsim.api.core.v01.Scenario;
 import org.matsim.api.core.v01.network.Link;
 import org.matsim.api.core.v01.population.Person;
 import org.matsim.contrib.multimodal.router.util.WalkTravelTime;
@@ -27,36 +30,30 @@ import org.matsim.contrib.parking.PC2.infrastructure.PC2Parking;
 import org.matsim.contrib.parking.lib.DebugLib;
 import org.matsim.contrib.parking.lib.GeneralLib;
 import org.matsim.contrib.parking.lib.obj.DoubleValueHashMap;
-import org.matsim.core.controler.Controler;
-import org.matsim.core.network.NetworkImpl;
 import org.matsim.core.network.NetworkUtils;
-import org.matsim.core.population.PersonImpl;
-
-import java.util.Map;
 
-public class ParkingScoreManager {
+public final class ParkingScoreManager {
 
 	private AbstractParkingBetas parkingBetas;
 	private double parkingScoreScalingFactor;
 	private double randomErrorTermScalingFactor;
-	// TODO: also add implementation of random error term + scaling here
-	DoubleValueHashMap<Id> scores;
-	Controler controler;
-	private WalkTravelTime walkTravelTime;
+	private DoubleValueHashMap<Id<Person>> scores;
+	private final Scenario scenario;
+	private final WalkTravelTime walkTravelTime;
 	private RandomErrorTermManager randomErrorTermManager;
 
-	public ParkingScoreManager(WalkTravelTime walkTravelTime, Controler controler) {
+	public ParkingScoreManager(WalkTravelTime walkTravelTime, Scenario scenario) {
 		this.walkTravelTime = walkTravelTime;
-		this.controler = controler;
+		this.scenario = scenario;
 	}
 
-	public double calcWalkScore(Coord destCoord, PC2Parking parking, Id personId, double parkingDurationInSeconds) {
-        Map<Id<Person>, ? extends Person> persons = controler.getScenario().getPopulation().getPersons();
-		PersonImpl person = (PersonImpl) persons.get(personId);
+	public double calcWalkScore(Coord destCoord, PC2Parking parking, Id<Person> personId, double parkingDurationInSeconds) {
+		Map<Id<Person>, ? extends Person> persons = scenario.getPopulation().getPersons();
+		Person person = persons.get(personId);
 
 		double parkingWalkBeta = getParkingBetas().getParkingWalkBeta(person, parkingDurationInSeconds);
 
-        Link link = NetworkUtils.getNearestLink(((NetworkImpl) controler.getScenario().getNetwork()), destCoord);
+		Link link = NetworkUtils.getNearestLink((scenario.getNetwork()), destCoord);
 		double length = link.getLength();
 		double walkTime = walkTravelTime.getLinkTravelTime(link, 0, person, null);
 		double walkSpeed = length / walkTime;
@@ -71,41 +68,38 @@ public class ParkingScoreManager {
 		if (parking.getId().toString().contains("stp")){
 			DebugLib.emptyFunctionForSettingBreakPoint();
 		}
-		
+
 		return (parkingWalkBeta * walkingTimeTotalInMinutes) * parkingScoreScalingFactor;
 	}
 
-	public double calcCostScore(double arrivalTime, double parkingDurationInSeconds, PC2Parking parking, Id personId) {
-        Map<Id<Person>, ? extends Person> persons = controler.getScenario().getPopulation().getPersons();
-		PersonImpl person = (PersonImpl) persons.get(personId);
+	public double calcCostScore(double arrivalTime, double parkingDurationInSeconds, PC2Parking parking, Id<Person> personId) {
+		Person person = scenario.getPopulation().getPersons().get(personId);
 		double parkingCostBeta = getParkingBetas().getParkingCostBeta(person);
-
 		double parkingCost = parking.getCost(personId, arrivalTime, parkingDurationInSeconds);
-
 		return (parkingCostBeta * parkingCost) * parkingScoreScalingFactor;
 	}
 
-	public double calcScore(Coord destCoord, double arrivalTime, double parkingDurationInSeconds, PC2Parking parking, Id personId, int legIndex) {
+	public double calcScore(Coord destCoord, double arrivalTime, double parkingDurationInSeconds, PC2Parking parking, Id<Person> personId, int legIndex) {
 		double walkScore = calcWalkScore(destCoord, parking, personId, parkingDurationInSeconds);
 		double costScore = calcCostScore(arrivalTime, parkingDurationInSeconds, parking, personId);
 		double randomError=0;
-		
+
 		if (randomErrorTermManager!=null){
 			randomError= randomErrorTermManager.getEpsilonAlternative(parking.getId(),personId,legIndex)*randomErrorTermScalingFactor*parkingScoreScalingFactor;
 		}
 		return costScore + walkScore + randomError;
 	}
 
-	public double getScore(Id id) {
+	public double getScore(Id<Person> id) {
 		return scores.get(id);
 	}
 
-	public synchronized void addScore(Id id, double incValue) {
+	public synchronized void addScore(Id<Person> id, double incValue) {
 		scores.incrementBy(id, incValue);
 	}
 
 	public synchronized void prepareForNewIteration() {
-		scores = new DoubleValueHashMap<Id>();
+		scores = new DoubleValueHashMap<>();
 	}
 
 	public double getParkingScoreScalingFactor() {
diff --git a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingInfrastructureManager.java b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingInfrastructureManager.java
index ab59e78..db8f1e1 100644
--- a/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingInfrastructureManager.java
+++ b/contribs/parking/src/main/java/org/matsim/contrib/parking/PC2/simulation/ParkingInfrastructureManager.java
@@ -338,16 +338,16 @@ public class ParkingInfrastructureManager {
 
 	}
 
-	public synchronized LinkedList<PC2Parking> getNonFullParking(Collection<PC2Parking> parkings) {
-		LinkedList<PC2Parking> result = new LinkedList<PC2Parking>();
-
-		for (PC2Parking p : parkings) {
-			if (p.getAvailableParkingCapacity() > 0) {
-				result.add(p);
-			}
-		}
-		return result;
-	}
+//	public synchronized LinkedList<PC2Parking> getNonFullParking(Collection<PC2Parking> parkings) {
+//		LinkedList<PC2Parking> result = new LinkedList<PC2Parking>();
+//		for (PC2Parking p : parkings) {
+//			if (p.getAvailableParkingCapacity() > 0) {
+//				result.add(p);
+//			}
+//		}
+//		return result;
+//	}
+	// never used. kai, jul'15
 
 	// TODO: make this method abstract
 	public synchronized PC2Parking personCarDepartureEvent(ParkingOperationRequestAttributes parkingOperationRequestAttributes) {
diff --git a/contribs/parking/src/main/java/org/matsim/contrib/parking/example/ParkingBetaExample.java b/contribs/parking/src/main/java/org/matsim/contrib/parking/example/ParkingBetaExample.java
index 2240cc5..09c4ada 100644
--- a/contribs/parking/src/main/java/org/matsim/contrib/parking/example/ParkingBetaExample.java
+++ b/contribs/parking/src/main/java/org/matsim/contrib/parking/example/ParkingBetaExample.java
@@ -19,10 +19,8 @@
  * *********************************************************************** */
 package org.matsim.contrib.parking.example;
 
-import org.matsim.api.core.v01.Id;
 import org.matsim.api.core.v01.population.Person;
 import org.matsim.contrib.parking.PC2.scoring.AbstractParkingBetas;
-import org.matsim.contrib.parking.lib.obj.DoubleValueHashMap;
 
 /**
  * @author jbischoff
diff --git a/contribs/parking/src/main/java/org/matsim/contrib/parking/example/ParkingCostCalculatorExample.java b/contribs/parking/src/main/java/org/matsim/contrib/parking/example/ParkingCostCalculatorExample.java
index 9bdef23..65ba63b 100644
--- a/contribs/parking/src/main/java/org/matsim/contrib/parking/example/ParkingCostCalculatorExample.java
+++ b/contribs/parking/src/main/java/org/matsim/contrib/parking/example/ParkingCostCalculatorExample.java
@@ -36,9 +36,7 @@ public class ParkingCostCalculatorExample implements ParkingCostModel {
 	}
 	
 	@Override
-	public double calcParkingCost(double arrivalTimeInSeconds,
-		
-			double durationInSeconds, Id<Person> personId, Id parkingFacilityId) {
+	public double calcParkingCost(double arrivalTimeInSeconds, double durationInSeconds, Id<Person> personId, Id parkingFacilityId) {
 					
 			return hourlyParkingCharge*(durationInSeconds/3600);
 		
diff --git a/contribs/parking/src/main/java/org/matsim/contrib/parking/lib/GeneralLib.java b/contribs/parking/src/main/java/org/matsim/contrib/parking/lib/GeneralLib.java
index f509503..f231c5b 100644
--- a/contribs/parking/src/main/java/org/matsim/contrib/parking/lib/GeneralLib.java
+++ b/contribs/parking/src/main/java/org/matsim/contrib/parking/lib/GeneralLib.java
@@ -77,8 +77,7 @@ public class GeneralLib {
 	public static final double numberOfSecondsInDay = 86400;
 	public static final double EPSILON = 1e-10;
 	
-	@Deprecated // matsim standard is to not use global nonfinal variables
-	public static String eclipseLocalTempPath = "C:/eTmp";
+	public static final String eclipseLocalTempPath = "C:/eTmp";
 
 
 	/*
@@ -86,12 +85,11 @@ public class GeneralLib {
 	 * 
 	 * Note: use the other method with the same name, if this poses problems.
 	 */
+	@Deprecated // use centralized infrastructure
 	public static Scenario readScenario(String plansFile, String networkFile) {
 		ScenarioImpl scenario = (ScenarioImpl) ScenarioUtils
 				.createScenario(ConfigUtils.createConfig());
-		Population population = scenario.getPopulation();
 
-		Network network = scenario.getNetwork();
 		new MatsimNetworkReader(scenario).readFile(networkFile);
 
 		PopulationReader popReader = new MatsimPopulationReader(scenario);
@@ -103,6 +101,7 @@ public class GeneralLib {
 	/*
 	 * Reads the population from the plans file.
 	 */
+	@Deprecated // use centralized infrastructure
 	public static Scenario readScenario(String plansFile, String networkFile,
 			String facilititiesPath) {
 		ScenarioImpl sc = (ScenarioImpl) ScenarioUtils
@@ -123,6 +122,7 @@ public class GeneralLib {
 	/*
 	 * Reads the network from the network file.
 	 */
+	@Deprecated // use centralized infrastructure
 	public static Network readNetwork(String networkFile) {
 		ScenarioImpl sc = (ScenarioImpl) ScenarioUtils
 				.createScenario(ConfigUtils.createConfig());
@@ -156,6 +156,7 @@ public class GeneralLib {
 	 * @param facilitiesFile
 	 * @return
 	 */
+	@Deprecated // use centralized infrastructure
 	public static ActivityFacilities readActivityFacilities(
 			String facilitiesFile) {
 		ScenarioImpl scenario = (ScenarioImpl) ScenarioUtils
diff --git a/contribs/parking/src/main/java/org/matsim/contrib/parking/run/RunParkingExample.java b/contribs/parking/src/main/java/org/matsim/contrib/parking/run/RunParkingExample.java
index e6598d7..5eab7db 100644
--- a/contribs/parking/src/main/java/org/matsim/contrib/parking/run/RunParkingExample.java
+++ b/contribs/parking/src/main/java/org/matsim/contrib/parking/run/RunParkingExample.java
@@ -28,14 +28,12 @@ import org.matsim.contrib.multimodal.router.util.WalkTravelTime;
 import org.matsim.contrib.parking.PC2.GeneralParkingModule;
 import org.matsim.contrib.parking.PC2.infrastructure.PC2Parking;
 import org.matsim.contrib.parking.PC2.infrastructure.PublicParking;
-import org.matsim.contrib.parking.PC2.scoring.ParkingCostModel;
 import org.matsim.contrib.parking.PC2.scoring.ParkingScoreManager;
 import org.matsim.contrib.parking.PC2.simulation.ParkingInfrastructureManager;
 import org.matsim.contrib.parking.example.ParkingBetaExample;
 import org.matsim.contrib.parking.example.ParkingCostCalculatorExample;
 import org.matsim.core.config.Config;
 import org.matsim.core.config.ConfigUtils;
-import org.matsim.core.config.groups.PlansCalcRouteConfigGroup;
 import org.matsim.core.controler.Controler;
 import org.matsim.core.controler.OutputDirectoryHierarchy;
 import org.matsim.core.scenario.ScenarioUtils;
@@ -51,52 +49,37 @@ public class RunParkingExample {
 	public static void main(String[] args) {
 		Config config = ConfigUtils.loadConfig("src/main/ressources/config.xml");
 		Scenario scenario = ScenarioUtils.loadScenario(config);
-		
+
 		Controler controler = new Controler(scenario);
-		controler.getConfig().controler().setOverwriteFileSetting(
-				true ?
-						OutputDirectoryHierarchy.OverwriteFileSetting.overwriteExistingFiles :
-						OutputDirectoryHierarchy.OverwriteFileSetting.failIfDirectoryExists );
+		controler.getConfig().controler().setOverwriteFileSetting( OutputDirectoryHierarchy.OverwriteFileSetting.overwriteExistingFiles );
+
+		// ---
 
-		//setting Parking Costs - charged parking @ work, free parking @ home
-		ParkingCostModel parkingCostModelWork = new ParkingCostCalculatorExample(1);
-		ParkingCostModel parkingCostModelHome = new ParkingCostCalculatorExample(0);
-		
-		
-		// we need some settings to walk from parking to destination - in this case, we are using default values.
-		PlansCalcRouteConfigGroup cg = new PlansCalcRouteConfigGroup();
-		WalkTravelTime walkTravelTime = new WalkTravelTime(cg);
-		ParkingScoreManager parkingScoreManager = new ParkingScoreManager(walkTravelTime, controler);
+		// we need some settings to walk from parking to destination:
+		ParkingScoreManager parkingScoreManager = new ParkingScoreManager(new WalkTravelTime(controler.getConfig().plansCalcRoute()), scenario);
 		parkingScoreManager.setParkingScoreScalingFactor(1);
 		parkingScoreManager.setParkingBetas(new ParkingBetaExample());
-		
-		
+
+		// ---
+
 		ParkingInfrastructureManager parkingInfrastructureManager = new ParkingInfrastructureManager(parkingScoreManager, controler.getEvents());
-		
-		//parking 1: we place this near the workplace
-		PublicParking workPark = new PublicParking(Id.create("workPark", PC2Parking.class), 98, new CoordImpl(10000,0), parkingCostModelWork, "park");
-		
-		//parking : we place this at home
-		PublicParking homePark = new PublicParking(Id.create("homePark", PC2Parking.class), 98, new CoordImpl(-25000,0), parkingCostModelHome, "park");
+		{
+			LinkedList<PublicParking> publicParkings = new LinkedList<PublicParking>();
+			//parking 1: we place this near the workplace
+			publicParkings.add(new PublicParking(Id.create("workPark", PC2Parking.class), 98, new CoordImpl(10000,0), 
+					new ParkingCostCalculatorExample(1), "park"));
+			//parking 2: we place this at home
+			publicParkings.add(new PublicParking(Id.create("homePark", PC2Parking.class), 98, new CoordImpl(-25000,0), 
+					new ParkingCostCalculatorExample(0), "park"));
+			parkingInfrastructureManager.setPublicParkings(publicParkings);
+		}
 
-		LinkedList<PublicParking> publicParkings = new LinkedList<PublicParking>();
-		
-		publicParkings.add(workPark);
-		publicParkings.add(homePark);
-		parkingInfrastructureManager.setPublicParkings(publicParkings);
-		
-		
-		
-		
-		
 
 		//setting up the Parking Module
 		GeneralParkingModule generalParkingModule = new GeneralParkingModule(controler);
 		generalParkingModule.setParkingScoreManager(parkingScoreManager);
-		generalParkingModule.setParkingCostModel(parkingCostModelHome);
 		generalParkingModule.setParkingInfrastructurManager(parkingInfrastructureManager);
-		
-//		controler.setOverwriteFiles(true);
+
 		controler.run();
 	}
 
diff --git a/playgrounds/wrashid/src/main/java/playground/wrashid/parkingChoice/freeFloatingCarSharing/SetupParkingForZHScenario.java b/playgrounds/wrashid/src/main/java/playground/wrashid/parkingChoice/freeFloatingCarSharing/SetupParkingForZHScenario.java
index d060728..f167cf4 100644
--- a/playgrounds/wrashid/src/main/java/playground/wrashid/parkingChoice/freeFloatingCarSharing/SetupParkingForZHScenario.java
+++ b/playgrounds/wrashid/src/main/java/playground/wrashid/parkingChoice/freeFloatingCarSharing/SetupParkingForZHScenario.java
@@ -121,7 +121,7 @@ public class SetupParkingForZHScenario {
 	
 	public static ParkingScoreManager prepareParkingScoreManager(ParkingModuleWithFFCarSharingZH parkingModule, LinkedList<PParking> parkings) {
 		Controler controler=parkingModule.getControler();
-		ParkingScoreManager parkingScoreManager = new ParkingScoreManager(getWalkTravelTime(parkingModule.getControler()), parkingModule.getControler());
+		ParkingScoreManager parkingScoreManager = new ParkingScoreManager(getWalkTravelTime(parkingModule.getControler()), controler.getScenario() );
 
 
         ParkingBetas parkingBetas=new ParkingBetas(getHouseHoldIncomeCantonZH(parkingModule.getControler().getScenario().getPopulation()));
-- 
2.3.2 (Apple Git-55)

